{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { UPDATE_RUN_DETAILS, UPDATE_RUN_SUMMARY, LOAD_RUN_SUMMARY, UPDATE_RUN_SYNC_STATE, CLEAN_RUN_STATE, UPDATE_EVENT_ID_RUN_DETAILS } from \"./run-actions\";\nimport RunDetails from \"../models/rundetails\";\nimport RunSummary from \"../models/runsummary\";\nvar initialState = {\n  runs: [],\n  runSummary: null\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var updatedRuns;\n  var updatedRun;\n\n  var _ret = function () {\n    switch (action.type) {\n      case UPDATE_RUN_DETAILS:\n        updatedRuns = action.runs.map(function (run) {\n          if (state.runs.findIndex(function (stateRun) {\n            return stateRun.runId === run.runId;\n          }) < 0) {\n            var pathArr = null;\n            var path = [];\n\n            if (run.runPath !== \"\") {\n              pathArr = run.runPath.split(\";\");\n              path = pathArr.map(function (loc) {\n                var locationArr = loc.split(\",\");\n                var location = {\n                  latitude: parseFloat(locationArr[0]),\n                  longitude: parseFloat(locationArr[1])\n                };\n                return location;\n              });\n            }\n\n            return new RunDetails(run.runId, run.runTotalTime, run.runDistance, run.runPace, run.runCaloriesBurnt, run.runCredits, run.runStartDateTime, run.runDate, run.runDay, path, run.runTrackSnapUrl, run.eventId, run.isSyncDone);\n          }\n        }).filter(function (updatedRun) {\n          return updatedRun !== undefined;\n        });\n        state.runs = state.runs.concat(updatedRuns);\n        state.runs.sort(function (a, b) {\n          return new Date(b.runStartDateTime) - new Date(a.runStartDateTime);\n        });\n        return {\n          v: state\n        };\n\n      case UPDATE_RUN_SUMMARY:\n        var updatedSummary = action.runSummary;\n        return {\n          v: _objectSpread(_objectSpread({}, state), {}, {\n            runSummary: new RunSummary(\"1\", updatedSummary.totalDistance.toString(), updatedSummary.totalRuns.toString(), updatedSummary.totalCredits.toString(), updatedSummary.averagePace.toString(), updatedSummary.averageDistance.toString(), updatedSummary.averageCaloriesBurnt.toString())\n          })\n        };\n\n      case UPDATE_RUN_SYNC_STATE:\n        var i;\n        var pendingRunsForSync = action.pendingRunsForSync;\n\n        for (i = 0; i < pendingRunsForSync.length; i++) {\n          var runToBeUpdatedIndex = state.runs.findIndex(function (run) {\n            return run.runId === pendingRunsForSync[i].runId;\n          });\n          state.runs[runToBeUpdatedIndex].isSyncDone = \"1\";\n        }\n\n        return {\n          v: state\n        };\n\n      case UPDATE_EVENT_ID_RUN_DETAILS:\n        updatedRun = action.pendingRunForSync;\n        var runDetailsIndex = state.runs.findIndex(function (run) {\n          return run.runId === updatedRun.runId;\n        });\n        state.runs[runDetailsIndex].eventId = updatedRun.eventId;\n        return {\n          v: state\n        };\n\n      case CLEAN_RUN_STATE:\n        state.runs = [];\n        state.runSummary = null;\n        return {\n          v: state\n        };\n\n      default:\n        return {\n          v: state\n        };\n    }\n  }();\n\n  if (typeof _ret === \"object\") return _ret.v;\n  return state;\n});","map":{"version":3,"sources":["F:/ReactNative/onehealthclient/onehealthclient/store/run-reducer.js"],"names":["UPDATE_RUN_DETAILS","UPDATE_RUN_SUMMARY","LOAD_RUN_SUMMARY","UPDATE_RUN_SYNC_STATE","CLEAN_RUN_STATE","UPDATE_EVENT_ID_RUN_DETAILS","RunDetails","RunSummary","initialState","runs","runSummary","state","action","updatedRuns","updatedRun","type","map","run","findIndex","stateRun","runId","pathArr","path","runPath","split","loc","locationArr","location","latitude","parseFloat","longitude","runTotalTime","runDistance","runPace","runCaloriesBurnt","runCredits","runStartDateTime","runDate","runDay","runTrackSnapUrl","eventId","isSyncDone","filter","undefined","concat","sort","a","b","Date","updatedSummary","totalDistance","toString","totalRuns","totalCredits","averagePace","averageDistance","averageCaloriesBurnt","i","pendingRunsForSync","length","runToBeUpdatedIndex","pendingRunForSync","runDetailsIndex"],"mappings":"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","sourcesContent":["import {UPDATE_RUN_DETAILS,UPDATE_RUN_SUMMARY,LOAD_RUN_SUMMARY,UPDATE_RUN_SYNC_STATE,CLEAN_RUN_STATE,UPDATE_EVENT_ID_RUN_DETAILS} from './run-actions';\r\nimport RunDetails from '../models/rundetails';\r\nimport RunSummary from '../models/runsummary';\r\n\r\nconst initialState = {\r\n    runs: [],\r\n    runSummary: null\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case UPDATE_RUN_DETAILS:\r\n\r\n            var updatedRuns = action.runs.map((run) => {\r\n                if (state.runs.findIndex(stateRun => stateRun.runId === run.runId) < 0) {\r\n                    var pathArr = null;\r\n                    var path = [];\r\n                    if (run.runPath !== \"\") {\r\n                        pathArr = run.runPath.split(\";\");\r\n                        path = pathArr.map(loc => {\r\n                            var locationArr = loc.split(\",\");\r\n                            var location = {\r\n                                latitude: parseFloat(locationArr[0]),\r\n                                longitude: parseFloat(locationArr[1])\r\n                            };\r\n                            return location;\r\n                        });\r\n                    }\r\n                    return new RunDetails(run.runId, run.runTotalTime, run.runDistance, run.runPace, run.runCaloriesBurnt, run.runCredits, run.runStartDateTime, run.runDate, run.runDay, path, run.runTrackSnapUrl, run.eventId, run.isSyncDone);\r\n                }\r\n            }).filter(updatedRun => updatedRun !== undefined);\r\n            state.runs = state.runs.concat(updatedRuns);\r\n            state.runs.sort(function(a, b) {\r\n                return new Date(b.runStartDateTime) - new Date(a.runStartDateTime);\r\n            });\r\n            return state;\r\n\r\n        case UPDATE_RUN_SUMMARY:\r\n            const updatedSummary = action.runSummary;\r\n            return { ...state,\r\n                runSummary: new RunSummary(\"1\", updatedSummary.totalDistance.toString(), updatedSummary.totalRuns.toString(), updatedSummary.totalCredits.toString(), updatedSummary.averagePace.toString(), updatedSummary.averageDistance.toString(), updatedSummary.averageCaloriesBurnt.toString())\r\n            };\r\n\r\n        case UPDATE_RUN_SYNC_STATE:\r\n            let i;\r\n            const pendingRunsForSync = action.pendingRunsForSync;\r\n            for (i = 0; i < pendingRunsForSync.length; i++) {\r\n                let runToBeUpdatedIndex = state.runs.findIndex(run => run.runId === pendingRunsForSync[i].runId);\r\n                state.runs[runToBeUpdatedIndex].isSyncDone = \"1\";\r\n            }\r\n            return state;\r\n\r\n        case UPDATE_EVENT_ID_RUN_DETAILS:\r\n            var updatedRun = action.pendingRunForSync;\r\n            let runDetailsIndex = state.runs.findIndex(run => run.runId === updatedRun.runId);\r\n            state.runs[runDetailsIndex].eventId = updatedRun.eventId;\r\n            return state;\r\n\r\n        case CLEAN_RUN_STATE:\r\n            state.runs = [];\r\n            state.runSummary = null;\r\n            return state;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n    return state;\r\n};"]},"metadata":{},"sourceType":"module"}