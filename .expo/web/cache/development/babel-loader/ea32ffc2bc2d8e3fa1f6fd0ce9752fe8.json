{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NetInfo from '@react-native-community/netinfo';\nimport { getUserAuthenticationToken } from \"../utils/AuthenticationUtils\";\nimport { insertEventRegistrationDetails, fetchEventRegistrationDetails, updateEventRegistrationDetails } from \"../utils/DBUtils\";\nimport configData from \"../config/config.json\";\nimport StatusCodes from \"../utils/StatusCodes.json\";\nimport Response from \"../models/response\";\nexport var UPDATE_EVENTS_FROM_SERVER = 'UPDATE_EVENTS_FROM_SERVER';\nexport var UPDATE_EVENT_REGISTRATION_DETAILS = 'UPDATE_EVENT_REGISTRATION_DETAILS';\nexport var UPDATE_RUN_IN_EVENT_REGISTRATION = 'UPDATE_RUN_IN_EVENT_REGISTRATION';\nexport var UPDATE_EVENT_RESULT_DETAILS = 'UPDATE_EVENT_RESULT_DETAILS';\nexport var CLEAN_EVENT_STATE = 'CLEAN_EVENT_STATE';\nimport * as userActions from \"../store/user-actions\";\nexport var registerUserForEvent = function registerUserForEvent(eventDetails) {\n  return function _callee(dispatch) {\n    var header, userId, networkStatus, URL;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(dispatch(getUserAuthenticationToken()));\n\n          case 2:\n            header = _context.sent;\n            userId = header.USER_ID;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(NetInfo.fetch().then(function (state) {\n              if (!state.isConnected) {\n                return new Response(StatusCodes.NO_INTERNET, null);\n              }\n            }));\n\n          case 6:\n            networkStatus = _context.sent;\n\n            if (!networkStatus) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\", networkStatus);\n\n          case 9:\n            URL = configData.SERVER_URL + \"event-registration/registerForEvent/\" + eventDetails.eventId + \"?userId=\" + userId;\n            return _context.abrupt(\"return\", fetch(URL, {\n              method: 'POST',\n              headers: header\n            }).then(function (response) {\n              return response.json();\n            }).then(function (response) {\n              if (response.status >= StatusCodes.BAD_REQUEST) {\n                if (response.message && response.message.includes(\"UNAUTHORIZED\")) {\n                  dispatch(userActions.cleanUserDataStateAndDB());\n                }\n\n                return new Response(response.status, null);\n              } else {\n                insertEventRegistrationDetails(eventDetails.eventId, eventDetails.eventName, eventDetails.eventDescription, eventDetails.eventStartDate, eventDetails.eventEndDate, eventDetails.eventMetricType, eventDetails.eventMetricValue, 0);\n                var eventRegistrationDetailsList = [];\n                eventDetails.runId = 0;\n                eventRegistrationDetailsList = eventRegistrationDetailsList.concat(eventDetails);\n                dispatch({\n                  type: UPDATE_EVENT_REGISTRATION_DETAILS,\n                  eventRegistrationDetails: eventRegistrationDetailsList\n                });\n                return new Response(StatusCodes.OK, eventDetails);\n              }\n            }).catch(function (err) {\n              return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\n            }));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var loadEventsFromServer = function loadEventsFromServer(pageNumber) {\n  return function _callee2(dispatch) {\n    var header, userId, networkStatus, URL;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(dispatch(getUserAuthenticationToken()));\n\n          case 2:\n            header = _context2.sent;\n            userId = header.USER_ID;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(NetInfo.fetch().then(function (state) {\n              if (!state.isConnected) {\n                return new Response(StatusCodes.NO_INTERNET, null);\n              }\n            }));\n\n          case 6:\n            networkStatus = _context2.sent;\n\n            if (!networkStatus) {\n              _context2.next = 9;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", networkStatus);\n\n          case 9:\n            URL = configData.SERVER_URL + \"event-details/getEvents/\" + userId + \"?page=\";\n            URL = URL + pageNumber;\n            ;\n            return _context2.abrupt(\"return\", fetch(URL, {\n              method: 'GET',\n              headers: header\n            }).then(function (response) {\n              return response.json();\n            }).then(function (response) {\n              if (response.status >= StatusCodes.BAD_REQUEST) {\n                if (response.message && response.message.includes(\"UNAUTHORIZED\")) {\n                  dispatch(userActions.cleanUserDataStateAndDB());\n                }\n\n                return new Response(response.status, null);\n              } else if (response.eventDetails.length > 0) {\n                dispatch({\n                  type: UPDATE_EVENTS_FROM_SERVER,\n                  eventDetails: response.eventDetails\n                });\n              }\n\n              return new Response(StatusCodes.OK, response);\n            }).catch(function (err) {\n              return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\n            }));\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var loadEventRegistrationDetails = function loadEventRegistrationDetails() {\n  return function _callee3(dispatch) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            fetchEventRegistrationDetails().then(function (response) {\n              if (response.rows._array.length > 0) {\n                var updatedEventRegistrationDetails = response.rows._array.map(function (eventRegistrationDetails) {\n                  var updatedEventRegistration = {\n                    eventId: eventRegistrationDetails.EVENT_ID,\n                    eventName: eventRegistrationDetails.EVENT_NAME,\n                    eventDescription: eventRegistrationDetails.EVENT_DESCRIPTION,\n                    eventStartDate: eventRegistrationDetails.EVENT_START_DATE,\n                    eventEndDate: eventRegistrationDetails.EVENT_END_DATE,\n                    eventMetricType: eventRegistrationDetails.EVENT_METRIC_TYPE,\n                    eventMetricValue: eventRegistrationDetails.EVENT_METRIC_VALUE,\n                    runId: eventRegistrationDetails.RUN_ID\n                  };\n                  return updatedEventRegistration;\n                });\n\n                dispatch({\n                  type: UPDATE_EVENT_REGISTRATION_DETAILS,\n                  eventRegistrationDetails: updatedEventRegistrationDetails\n                });\n              } else {\n                  dispatch(loadEventRegistrationDetailsFromServer(0)).then(function (response) {\n                    if (response.status >= StatusCodes.BAD_REQUEST) {} else if (response.data && response.data.eventDetails.length > 0) {\n                      response.data.eventDetails.map(function (eventDetails) {\n                        insertEventRegistrationDetails(eventDetails.eventId, eventDetails.eventName, eventDetails.eventDescription, eventDetails.eventStartDate, eventDetails.eventEndDate, eventDetails.eventMetricType, eventDetails.eventMetricValue, eventDetails.runId);\n                      });\n                    }\n                  });\n                }\n            }).catch(function (err) {});\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var loadEventRegistrationDetailsFromServer = function loadEventRegistrationDetailsFromServer(pageNumber) {\n  return function _callee4(dispatch) {\n    var header, userId, networkStatus, URL;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return _regeneratorRuntime.awrap(dispatch(getUserAuthenticationToken()));\n\n          case 2:\n            header = _context4.sent;\n            userId = header.USER_ID;\n            _context4.next = 6;\n            return _regeneratorRuntime.awrap(NetInfo.fetch().then(function (state) {\n              if (!state.isConnected) {\n                return new Response(StatusCodes.NO_INTERNET, null);\n              }\n            }));\n\n          case 6:\n            networkStatus = _context4.sent;\n\n            if (!networkStatus) {\n              _context4.next = 9;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", networkStatus);\n\n          case 9:\n            URL = configData.SERVER_URL + \"event-registration/getRegisteredEventsForUser/\" + userId;\n            return _context4.abrupt(\"return\", fetch(URL, {\n              method: 'GET',\n              headers: header\n            }).then(function (response) {\n              return response.json();\n            }).then(function (response) {\n              if (response.status >= StatusCodes.BAD_REQUEST) {\n                return new Response(response.status, null);\n              } else if (response.eventDetails.length > 0) {\n                var updatedEventRegistrationDetails = response.eventDetails.map(function (eventDetails) {\n                  var updatedEventRegisration = {\n                    eventId: eventRegistrationDetails.eventId,\n                    eventName: eventRegistrationDetails.eventName,\n                    eventDescription: eventRegistrationDetails.eventDescription,\n                    eventStartDate: eventRegistrationDetails.eventStartDate,\n                    eventEndDate: eventRegistrationDetails.eventEndDate,\n                    eventMetricType: eventRegistrationDetails.eventMetricType,\n                    eventMetricValue: eventRegistrationDetails.eventMetricValue,\n                    runId: eventRegistrationDetails.runId\n                  };\n                  return updatedEventRegisration;\n                });\n                dispatch({\n                  type: UPDATE_EVENT_REGISTRATION_DETAILS,\n                  eventRegistrationDetails: updatedEventRegistrationDetails\n                });\n              }\n\n              return new Response(StatusCodes.OK, response);\n            }).catch(function (err) {\n              return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\n            }));\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var loadEventResultDetailsFromServer = function loadEventResultDetailsFromServer() {\n  return function _callee5(dispatch) {\n    var header, userId, networkStatus, URL;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(dispatch(getUserAuthenticationToken()));\n\n          case 2:\n            header = _context5.sent;\n            userId = header.USER_ID;\n            _context5.next = 6;\n            return _regeneratorRuntime.awrap(NetInfo.fetch().then(function (state) {\n              if (!state.isConnected) {\n                return new Response(StatusCodes.NO_INTERNET, null);\n              }\n            }));\n\n          case 6:\n            networkStatus = _context5.sent;\n\n            if (!networkStatus) {\n              _context5.next = 9;\n              break;\n            }\n\n            return _context5.abrupt(\"return\", networkStatus);\n\n          case 9:\n            URL = configData.SERVER_URL + \"event-results/\" + userId;\n            return _context5.abrupt(\"return\", fetch(URL, {\n              method: 'GET',\n              headers: header\n            }).then(function (response) {\n              return response.json();\n            }).then(function (response) {\n              if (response.status >= StatusCodes.BAD_REQUEST) {\n                return new Response(response.status, null);\n              } else if (response.eventResultDetails && response.eventResultDetails.length > 0) {\n                var updatedEventResultDetails = response.eventResultDetails.map(function (eventResultDetails) {\n                  var updatedEventResult = {\n                    eventId: eventResultDetails.eventId,\n                    runId: eventResultDetails.runId,\n                    userRank: eventResultDetails.userRank\n                  };\n                  return updatedEventResult;\n                });\n                dispatch({\n                  type: UPDATE_EVENT_RESULT_DETAILS,\n                  eventResultDetails: updatedEventResultDetails\n                });\n              }\n\n              return new Response(StatusCodes.OK, response);\n            }).catch(function (err) {\n              return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\n            }));\n\n          case 11:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var updateRunDetailsInEventRegistration = function updateRunDetailsInEventRegistration(eventId, runId) {\n  return function _callee6(dispatch) {\n    var updatedEventRegistrationDetails;\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            updatedEventRegistrationDetails = {\n              eventId: eventId,\n              runId: runId\n            };\n            updateEventRegistrationDetails(eventId, runId);\n            dispatch({\n              type: UPDATE_RUN_IN_EVENT_REGISTRATION,\n              updatedEventRegistrationDetails: updatedEventRegistrationDetails\n            });\n\n          case 3:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["F:/ReactNative/onehealthclient/onehealthclient/store/event-actions.js"],"names":["NetInfo","getUserAuthenticationToken","insertEventRegistrationDetails","fetchEventRegistrationDetails","updateEventRegistrationDetails","configData","StatusCodes","Response","UPDATE_EVENTS_FROM_SERVER","UPDATE_EVENT_REGISTRATION_DETAILS","UPDATE_RUN_IN_EVENT_REGISTRATION","UPDATE_EVENT_RESULT_DETAILS","CLEAN_EVENT_STATE","userActions","registerUserForEvent","eventDetails","dispatch","header","userId","USER_ID","fetch","then","state","isConnected","NO_INTERNET","networkStatus","URL","SERVER_URL","eventId","method","headers","response","json","status","BAD_REQUEST","message","includes","cleanUserDataStateAndDB","eventName","eventDescription","eventStartDate","eventEndDate","eventMetricType","eventMetricValue","eventRegistrationDetailsList","runId","concat","type","eventRegistrationDetails","OK","catch","err","INTERNAL_SERVER_ERROR","loadEventsFromServer","pageNumber","length","loadEventRegistrationDetails","rows","_array","updatedEventRegistrationDetails","map","updatedEventRegistration","EVENT_ID","EVENT_NAME","EVENT_DESCRIPTION","EVENT_START_DATE","EVENT_END_DATE","EVENT_METRIC_TYPE","EVENT_METRIC_VALUE","RUN_ID","loadEventRegistrationDetailsFromServer","data","updatedEventRegisration","loadEventResultDetailsFromServer","eventResultDetails","updatedEventResultDetails","updatedEventResult","userRank","updateRunDetailsInEventRegistration"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,iCAApB;AACA,SAAQC,0BAAR;AACA,SAAQC,8BAAR,EAAuCC,6BAAvC,EAAqEC,8BAArE;AACA,OAAOC,UAAP;AACA,OAAOC,WAAP;AACA,OAAOC,QAAP;AAEA,OAAO,IAAMC,yBAAyB,GAAC,2BAAhC;AACP,OAAO,IAAMC,iCAAiC,GAAC,mCAAxC;AACP,OAAO,IAAMC,gCAAgC,GAAC,kCAAvC;AACP,OAAO,IAAMC,2BAA2B,GAAC,6BAAlC;AACP,OAAO,IAAMC,iBAAiB,GAAC,mBAAxB;AAEP,OAAO,KAAKC,WAAZ;AAGA,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,YAAD,EAAkB;AACpD,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACcA,QAAQ,CAACf,0BAA0B,EAA3B,CADtB;;AAAA;AACDgB,YAAAA,MADC;AAEDC,YAAAA,MAFC,GAEQD,MAAM,CAACE,OAFf;AAAA;AAAA,6CAIqBnB,OAAO,CAACoB,KAAR,GAAgBC,IAAhB,CAAqB,UAAAC,KAAK,EAAI;AACtD,kBAAI,CAACA,KAAK,CAACC,WAAX,EAAwB;AACtB,uBAAO,IAAIhB,QAAJ,CAAaD,WAAW,CAACkB,WAAzB,EAAsC,IAAtC,CAAP;AACD;AACF,aAJyB,CAJrB;;AAAA;AAIDC,YAAAA,aAJC;;AAAA,iBASDA,aATC;AAAA;AAAA;AAAA;;AAAA,6CAUIA,aAVJ;;AAAA;AAaDC,YAAAA,GAbC,GAaKrB,UAAU,CAACsB,UAAX,GAAwB,sCAAxB,GAAiEZ,YAAY,CAACa,OAA9E,GAAwF,UAAxF,GAAqGV,MAb1G;AAAA,6CAcEE,KAAK,CAACM,GAAD,EAAM;AACdG,cAAAA,MAAM,EAAE,MADM;AAEdC,cAAAA,OAAO,EAAEb;AAFK,aAAN,CAAL,CAGFI,IAHE,CAGG,UAAAU,QAAQ;AAAA,qBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,aAHX,EAIJX,IAJI,CAIC,UAACU,QAAD,EAAc;AAClB,kBAAIA,QAAQ,CAACE,MAAT,IAAmB3B,WAAW,CAAC4B,WAAnC,EAAgD;AAC9C,oBAAIH,QAAQ,CAACI,OAAT,IAAoBJ,QAAQ,CAACI,OAAT,CAAiBC,QAAjB,CAA0B,cAA1B,CAAxB,EAAmE;AACjEpB,kBAAAA,QAAQ,CAACH,WAAW,CAACwB,uBAAZ,EAAD,CAAR;AACD;;AACD,uBAAO,IAAI9B,QAAJ,CAAawB,QAAQ,CAACE,MAAtB,EAA8B,IAA9B,CAAP;AACD,eALD,MAKO;AAEL/B,gBAAAA,8BAA8B,CAACa,YAAY,CAACa,OAAd,EAAuBb,YAAY,CAACuB,SAApC,EAA+CvB,YAAY,CAACwB,gBAA5D,EAA8ExB,YAAY,CAACyB,cAA3F,EAA2GzB,YAAY,CAAC0B,YAAxH,EAAsI1B,YAAY,CAAC2B,eAAnJ,EAAoK3B,YAAY,CAAC4B,gBAAjL,EAAmM,CAAnM,CAA9B;AAEA,oBAAIC,4BAA4B,GAAG,EAAnC;AACA7B,gBAAAA,YAAY,CAAC8B,KAAb,GAAqB,CAArB;AACAD,gBAAAA,4BAA4B,GAAGA,4BAA4B,CAACE,MAA7B,CAAoC/B,YAApC,CAA/B;AAEAC,gBAAAA,QAAQ,CAAC;AACP+B,kBAAAA,IAAI,EAAEtC,iCADC;AAEPuC,kBAAAA,wBAAwB,EAAEJ;AAFnB,iBAAD,CAAR;AAIA,uBAAO,IAAIrC,QAAJ,CAAaD,WAAW,CAAC2C,EAAzB,EAA6BlC,YAA7B,CAAP;AACD;AACF,aAxBI,EAwBFmC,KAxBE,CAwBI,UAAAC,GAAG,EAAI;AACd,qBAAO,IAAI5C,QAAJ,CAAaD,WAAW,CAAC8C,qBAAzB,EAAgD,IAAhD,CAAP;AACD,aA1BI,CAdF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA0CD,CA3CM;AA8CP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,UAAD,EAAgB;AAClD,SAAO,kBAAMtC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACcA,QAAQ,CAACf,0BAA0B,EAA3B,CADtB;;AAAA;AACDgB,YAAAA,MADC;AAEDC,YAAAA,MAFC,GAEQD,MAAM,CAACE,OAFf;AAAA;AAAA,6CAIqBnB,OAAO,CAACoB,KAAR,GAAgBC,IAAhB,CAAqB,UAAAC,KAAK,EAAI;AACtD,kBAAI,CAACA,KAAK,CAACC,WAAX,EAAwB;AACtB,uBAAO,IAAIhB,QAAJ,CAAaD,WAAW,CAACkB,WAAzB,EAAsC,IAAtC,CAAP;AACD;AACF,aAJyB,CAJrB;;AAAA;AAIDC,YAAAA,aAJC;;AAAA,iBASDA,aATC;AAAA;AAAA;AAAA;;AAAA,8CAUIA,aAVJ;;AAAA;AAaDC,YAAAA,GAbC,GAaKrB,UAAU,CAACsB,UAAX,GAAwB,0BAAxB,GAAqDT,MAArD,GAA8D,QAbnE;AAcLQ,YAAAA,GAAG,GAAGA,GAAG,GAAG4B,UAAZ;AAAuB;AAdlB,8CAeElC,KAAK,CAACM,GAAD,EAAM;AACdG,cAAAA,MAAM,EAAE,KADM;AAEdC,cAAAA,OAAO,EAAEb;AAFK,aAAN,CAAL,CAGFI,IAHE,CAGG,UAAAU,QAAQ;AAAA,qBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,aAHX,EAIJX,IAJI,CAIC,UAACU,QAAD,EAAc;AAClB,kBAAIA,QAAQ,CAACE,MAAT,IAAmB3B,WAAW,CAAC4B,WAAnC,EAAgD;AAC9C,oBAAIH,QAAQ,CAACI,OAAT,IAAoBJ,QAAQ,CAACI,OAAT,CAAiBC,QAAjB,CAA0B,cAA1B,CAAxB,EAAmE;AACjEpB,kBAAAA,QAAQ,CAACH,WAAW,CAACwB,uBAAZ,EAAD,CAAR;AACD;;AACD,uBAAO,IAAI9B,QAAJ,CAAawB,QAAQ,CAACE,MAAtB,EAA8B,IAA9B,CAAP;AACD,eALD,MAKO,IAAIF,QAAQ,CAAChB,YAAT,CAAsBwC,MAAtB,GAA+B,CAAnC,EAAsC;AAC3CvC,gBAAAA,QAAQ,CAAC;AACP+B,kBAAAA,IAAI,EAAEvC,yBADC;AAEPO,kBAAAA,YAAY,EAAEgB,QAAQ,CAAChB;AAFhB,iBAAD,CAAR;AAID;;AACD,qBAAO,IAAIR,QAAJ,CAAaD,WAAW,CAAC2C,EAAzB,EAA6BlB,QAA7B,CAAP;AACD,aAjBI,EAiBFmB,KAjBE,CAiBI,UAAAC,GAAG,EAAI;AACd,qBAAO,IAAI5C,QAAJ,CAAaD,WAAW,CAAC8C,qBAAzB,EAAgD,IAAhD,CAAP;AACD,aAnBI,CAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAoCD,CArCM;AAwCP,OAAO,IAAMI,4BAA4B,GAAG,SAA/BA,4BAA+B,GAAM;AAChD,SAAO,kBAAMxC,QAAN;AAAA;AAAA;AAAA;AAAA;AAELb,YAAAA,6BAA6B,GAAGkB,IAAhC,CAAqC,UAAAU,QAAQ,EAAI;AAC7C,kBAAIA,QAAQ,CAAC0B,IAAT,CAAcC,MAAd,CAAqBH,MAArB,GAA8B,CAAlC,EAAqC;AACnC,oBAAII,+BAA+B,GAAG5B,QAAQ,CAAC0B,IAAT,CAAcC,MAAd,CAAqBE,GAArB,CAAyB,UAACZ,wBAAD,EAA8B;AAC3F,sBAAIa,wBAAwB,GAAG;AAC7BjC,oBAAAA,OAAO,EAAEoB,wBAAwB,CAACc,QADL;AAE7BxB,oBAAAA,SAAS,EAAEU,wBAAwB,CAACe,UAFP;AAG7BxB,oBAAAA,gBAAgB,EAAES,wBAAwB,CAACgB,iBAHd;AAI7BxB,oBAAAA,cAAc,EAAEQ,wBAAwB,CAACiB,gBAJZ;AAK7BxB,oBAAAA,YAAY,EAAEO,wBAAwB,CAACkB,cALV;AAM7BxB,oBAAAA,eAAe,EAAEM,wBAAwB,CAACmB,iBANb;AAO7BxB,oBAAAA,gBAAgB,EAAEK,wBAAwB,CAACoB,kBAPd;AAQ7BvB,oBAAAA,KAAK,EAAEG,wBAAwB,CAACqB;AARH,mBAA/B;AAUA,yBAAOR,wBAAP;AACD,iBAZqC,CAAtC;;AAeA7C,gBAAAA,QAAQ,CAAC;AACP+B,kBAAAA,IAAI,EAAEtC,iCADC;AAEPuC,kBAAAA,wBAAwB,EAAEW;AAFnB,iBAAD,CAAR;AAID,eApBD,MAsBK;AAEH3C,kBAAAA,QAAQ,CAACsD,sCAAsC,CAAC,CAAD,CAAvC,CAAR,CAAoDjD,IAApD,CAAyD,UAACU,QAAD,EAAc;AACrE,wBAAIA,QAAQ,CAACE,MAAT,IAAmB3B,WAAW,CAAC4B,WAAnC,EAAgD,CAE/C,CAFD,MAEO,IAAIH,QAAQ,CAACwC,IAAT,IAAiBxC,QAAQ,CAACwC,IAAT,CAAcxD,YAAd,CAA2BwC,MAA3B,GAAoC,CAAzD,EAA4D;AACjExB,sBAAAA,QAAQ,CAACwC,IAAT,CAAcxD,YAAd,CAA2B6C,GAA3B,CAA+B,UAAC7C,YAAD,EAAkB;AAE/Cb,wBAAAA,8BAA8B,CAACa,YAAY,CAACa,OAAd,EAAuBb,YAAY,CAACuB,SAApC,EAA+CvB,YAAY,CAACwB,gBAA5D,EAA8ExB,YAAY,CAACyB,cAA3F,EAA2GzB,YAAY,CAAC0B,YAAxH,EAAsI1B,YAAY,CAAC2B,eAAnJ,EAAoK3B,YAAY,CAAC4B,gBAAjL,EAAmM5B,YAAY,CAAC8B,KAAhN,CAA9B;AACD,uBAHD;AAID;AACF,mBATD;AAUD;AACF,aApCH,EAqCGK,KArCH,CAqCS,UAAAC,GAAG,EAAI,CAEb,CAvCH;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA2CD,CA5CM;AA+CP,OAAO,IAAMmB,sCAAsC,GAAG,SAAzCA,sCAAyC,CAAChB,UAAD,EAAgB;AACpE,SAAO,kBAAMtC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACcA,QAAQ,CAACf,0BAA0B,EAA3B,CADtB;;AAAA;AACDgB,YAAAA,MADC;AAEDC,YAAAA,MAFC,GAEQD,MAAM,CAACE,OAFf;AAAA;AAAA,6CAIqBnB,OAAO,CAACoB,KAAR,GAAgBC,IAAhB,CAAqB,UAAAC,KAAK,EAAI;AACtD,kBAAI,CAACA,KAAK,CAACC,WAAX,EAAwB;AACtB,uBAAO,IAAIhB,QAAJ,CAAaD,WAAW,CAACkB,WAAzB,EAAsC,IAAtC,CAAP;AACD;AACF,aAJyB,CAJrB;;AAAA;AAIDC,YAAAA,aAJC;;AAAA,iBASDA,aATC;AAAA;AAAA;AAAA;;AAAA,8CAUIA,aAVJ;;AAAA;AAaDC,YAAAA,GAbC,GAaKrB,UAAU,CAACsB,UAAX,GAAwB,gDAAxB,GAA2ET,MAbhF;AAAA,8CAcEE,KAAK,CAACM,GAAD,EAAM;AACdG,cAAAA,MAAM,EAAE,KADM;AAEdC,cAAAA,OAAO,EAAEb;AAFK,aAAN,CAAL,CAGFI,IAHE,CAGG,UAAAU,QAAQ;AAAA,qBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,aAHX,EAIJX,IAJI,CAIC,UAACU,QAAD,EAAc;AAClB,kBAAIA,QAAQ,CAACE,MAAT,IAAmB3B,WAAW,CAAC4B,WAAnC,EAAgD;AAC9C,uBAAO,IAAI3B,QAAJ,CAAawB,QAAQ,CAACE,MAAtB,EAA8B,IAA9B,CAAP;AACD,eAFD,MAEO,IAAIF,QAAQ,CAAChB,YAAT,CAAsBwC,MAAtB,GAA+B,CAAnC,EAAsC;AAC3C,oBAAII,+BAA+B,GAAG5B,QAAQ,CAAChB,YAAT,CAAsB6C,GAAtB,CAA0B,UAAC7C,YAAD,EAAkB;AAChF,sBAAIyD,uBAAuB,GAAG;AAC5B5C,oBAAAA,OAAO,EAAEoB,wBAAwB,CAACpB,OADN;AAE5BU,oBAAAA,SAAS,EAAEU,wBAAwB,CAACV,SAFR;AAG5BC,oBAAAA,gBAAgB,EAAES,wBAAwB,CAACT,gBAHf;AAI5BC,oBAAAA,cAAc,EAAEQ,wBAAwB,CAACR,cAJb;AAK5BC,oBAAAA,YAAY,EAAEO,wBAAwB,CAACP,YALX;AAM5BC,oBAAAA,eAAe,EAAEM,wBAAwB,CAACN,eANd;AAO5BC,oBAAAA,gBAAgB,EAAEK,wBAAwB,CAACL,gBAPf;AAQ5BE,oBAAAA,KAAK,EAAEG,wBAAwB,CAACH;AARJ,mBAA9B;AAUA,yBAAO2B,uBAAP;AACD,iBAZqC,CAAtC;AAeAxD,gBAAAA,QAAQ,CAAC;AACP+B,kBAAAA,IAAI,EAAEtC,iCADC;AAEPuC,kBAAAA,wBAAwB,EAAEW;AAFnB,iBAAD,CAAR;AAID;;AACD,qBAAO,IAAIpD,QAAJ,CAAaD,WAAW,CAAC2C,EAAzB,EAA6BlB,QAA7B,CAAP;AACD,aA7BI,EA6BFmB,KA7BE,CA6BI,UAAAC,GAAG,EAAI;AACd,qBAAO,IAAI5C,QAAJ,CAAaD,WAAW,CAAC8C,qBAAzB,EAAgD,IAAhD,CAAP;AACD,aA/BI,CAdF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA+CD,CAhDM;AAmDP,OAAO,IAAMqB,gCAAgC,GAAG,SAAnCA,gCAAmC,GAAM;AACpD,SAAO,kBAAMzD,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACcA,QAAQ,CAACf,0BAA0B,EAA3B,CADtB;;AAAA;AACDgB,YAAAA,MADC;AAEDC,YAAAA,MAFC,GAEQD,MAAM,CAACE,OAFf;AAAA;AAAA,6CAIqBnB,OAAO,CAACoB,KAAR,GAAgBC,IAAhB,CAAqB,UAAAC,KAAK,EAAI;AACtD,kBAAI,CAACA,KAAK,CAACC,WAAX,EAAwB;AACtB,uBAAO,IAAIhB,QAAJ,CAAaD,WAAW,CAACkB,WAAzB,EAAsC,IAAtC,CAAP;AACD;AACF,aAJyB,CAJrB;;AAAA;AAIDC,YAAAA,aAJC;;AAAA,iBASDA,aATC;AAAA;AAAA;AAAA;;AAAA,8CAUIA,aAVJ;;AAAA;AAaDC,YAAAA,GAbC,GAaKrB,UAAU,CAACsB,UAAX,GAAwB,gBAAxB,GAA2CT,MAbhD;AAAA,8CAcEE,KAAK,CAACM,GAAD,EAAM;AACdG,cAAAA,MAAM,EAAE,KADM;AAEdC,cAAAA,OAAO,EAAEb;AAFK,aAAN,CAAL,CAGFI,IAHE,CAGG,UAAAU,QAAQ;AAAA,qBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,aAHX,EAIJX,IAJI,CAIC,UAACU,QAAD,EAAc;AAClB,kBAAIA,QAAQ,CAACE,MAAT,IAAmB3B,WAAW,CAAC4B,WAAnC,EAAgD;AAC9C,uBAAO,IAAI3B,QAAJ,CAAawB,QAAQ,CAACE,MAAtB,EAA8B,IAA9B,CAAP;AACD,eAFD,MAEO,IAAIF,QAAQ,CAAC2C,kBAAT,IAA+B3C,QAAQ,CAAC2C,kBAAT,CAA4BnB,MAA5B,GAAqC,CAAxE,EAA2E;AAChF,oBAAIoB,yBAAyB,GAAG5C,QAAQ,CAAC2C,kBAAT,CAA4Bd,GAA5B,CAAgC,UAACc,kBAAD,EAAwB;AACtF,sBAAIE,kBAAkB,GAAG;AACvBhD,oBAAAA,OAAO,EAAE8C,kBAAkB,CAAC9C,OADL;AAEvBiB,oBAAAA,KAAK,EAAE6B,kBAAkB,CAAC7B,KAFH;AAGvBgC,oBAAAA,QAAQ,EAAEH,kBAAkB,CAACG;AAHN,mBAAzB;AAKA,yBAAOD,kBAAP;AACD,iBAP+B,CAAhC;AAUA5D,gBAAAA,QAAQ,CAAC;AACP+B,kBAAAA,IAAI,EAAEpC,2BADC;AAEP+D,kBAAAA,kBAAkB,EAAEC;AAFb,iBAAD,CAAR;AAID;;AACD,qBAAO,IAAIpE,QAAJ,CAAaD,WAAW,CAAC2C,EAAzB,EAA6BlB,QAA7B,CAAP;AACD,aAxBI,EAwBFmB,KAxBE,CAwBI,UAAAC,GAAG,EAAI;AACd,qBAAO,IAAI5C,QAAJ,CAAaD,WAAW,CAAC8C,qBAAzB,EAAgD,IAAhD,CAAP;AACD,aA1BI,CAdF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA0CD,CA3CM;AA8CP,OAAO,IAAM0B,mCAAmC,GAAG,SAAtCA,mCAAsC,CAAClD,OAAD,EAAUiB,KAAV,EAAoB;AACrE,SAAO,kBAAM7B,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACD2C,YAAAA,+BADC,GACiC;AACpC/B,cAAAA,OAAO,EAAEA,OAD2B;AAEpCiB,cAAAA,KAAK,EAAEA;AAF6B,aADjC;AAMLzC,YAAAA,8BAA8B,CAACwB,OAAD,EAAUiB,KAAV,CAA9B;AAGA7B,YAAAA,QAAQ,CAAC;AACP+B,cAAAA,IAAI,EAAErC,gCADC;AAEPiD,cAAAA,+BAA+B,EAAEA;AAF1B,aAAD,CAAR;;AATK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAcD,CAfM","sourcesContent":["import NetInfo from '@react-native-community/netinfo';\r\nimport {getUserAuthenticationToken} from '../utils/AuthenticationUtils';\r\nimport {insertEventRegistrationDetails,fetchEventRegistrationDetails,updateEventRegistrationDetails} from '../utils/DBUtils';\r\nimport configData from \"../config/config.json\";\r\nimport StatusCodes from \"../utils/StatusCodes.json\";\r\nimport Response from '../models/response';\r\n\r\nexport const UPDATE_EVENTS_FROM_SERVER='UPDATE_EVENTS_FROM_SERVER';\r\nexport const UPDATE_EVENT_REGISTRATION_DETAILS='UPDATE_EVENT_REGISTRATION_DETAILS';\r\nexport const UPDATE_RUN_IN_EVENT_REGISTRATION='UPDATE_RUN_IN_EVENT_REGISTRATION';\r\nexport const UPDATE_EVENT_RESULT_DETAILS='UPDATE_EVENT_RESULT_DETAILS';\r\nexport const CLEAN_EVENT_STATE='CLEAN_EVENT_STATE';\r\n\r\nimport * as userActions from '../store/user-actions';\r\n\r\n//Method to Register User For Event and Update details to server\r\nexport const registerUserForEvent = (eventDetails) => {\r\n  return async dispatch => {\r\n    var header = await dispatch(getUserAuthenticationToken());\r\n    var userId = header.USER_ID;\r\n\r\n    var networkStatus = await NetInfo.fetch().then(state => {\r\n      if (!state.isConnected) {\r\n        return new Response(StatusCodes.NO_INTERNET, null);\r\n      }\r\n    });\r\n    if (networkStatus) {\r\n      return networkStatus;\r\n    }\r\n\r\n    var URL = configData.SERVER_URL + \"event-registration/registerForEvent/\" + eventDetails.eventId + \"?userId=\" + userId;\r\n    return fetch(URL, {\r\n        method: 'POST',\r\n        headers: header\r\n      }).then(response => response.json())\r\n      .then((response) => {\r\n        if (response.status >= StatusCodes.BAD_REQUEST) {\r\n          if (response.message && response.message.includes(\"UNAUTHORIZED\")) {\r\n            dispatch(userActions.cleanUserDataStateAndDB());\r\n          }\r\n          return new Response(response.status, null);\r\n        } else {\r\n          //Async Dispatch Update Event Registration Details in Local DB\r\n          insertEventRegistrationDetails(eventDetails.eventId, eventDetails.eventName, eventDetails.eventDescription, eventDetails.eventStartDate, eventDetails.eventEndDate, eventDetails.eventMetricType, eventDetails.eventMetricValue, 0);\r\n\r\n          var eventRegistrationDetailsList = [];\r\n          eventDetails.runId = 0;\r\n          eventRegistrationDetailsList = eventRegistrationDetailsList.concat(eventDetails);\r\n          //Async Dispatch Update Event Registration State\r\n          dispatch({\r\n            type: UPDATE_EVENT_REGISTRATION_DETAILS,\r\n            eventRegistrationDetails: eventRegistrationDetailsList\r\n          });\r\n          return new Response(StatusCodes.OK, eventDetails);\r\n        }\r\n      }).catch(err => {\r\n        return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n      });\r\n  }\r\n};\r\n\r\n//Method to Load Available Events from Server\r\nexport const loadEventsFromServer = (pageNumber) => {\r\n  return async dispatch => {\r\n    var header = await dispatch(getUserAuthenticationToken());\r\n    var userId = header.USER_ID;\r\n\r\n    var networkStatus = await NetInfo.fetch().then(state => {\r\n      if (!state.isConnected) {\r\n        return new Response(StatusCodes.NO_INTERNET, null);\r\n      }\r\n    });\r\n    if (networkStatus) {\r\n      return networkStatus;\r\n    }\r\n\r\n    var URL = configData.SERVER_URL + \"event-details/getEvents/\" + userId + \"?page=\";\r\n    URL = URL + pageNumber;;\r\n    return fetch(URL, {\r\n        method: 'GET',\r\n        headers: header\r\n      }).then(response => response.json())\r\n      .then((response) => {\r\n        if (response.status >= StatusCodes.BAD_REQUEST) {\r\n          if (response.message && response.message.includes(\"UNAUTHORIZED\")) {\r\n            dispatch(userActions.cleanUserDataStateAndDB());\r\n          }\r\n          return new Response(response.status, null);\r\n        } else if (response.eventDetails.length > 0) {\r\n          dispatch({\r\n            type: UPDATE_EVENTS_FROM_SERVER,\r\n            eventDetails: response.eventDetails\r\n          });\r\n        }\r\n        return new Response(StatusCodes.OK, response);\r\n      }).catch(err => {\r\n        return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n      });\r\n  }\r\n};\r\n\r\n//Method to Load Event Registration Details first from local DB, and then from server in case needed and hydrate local DB\r\nexport const loadEventRegistrationDetails = () => {\r\n  return async dispatch => {\r\n    //Fetch Event Registration Details from Local DB\r\n    fetchEventRegistrationDetails().then(response => {\r\n        if (response.rows._array.length > 0) {\r\n          var updatedEventRegistrationDetails = response.rows._array.map((eventRegistrationDetails) => {\r\n            var updatedEventRegistration = {\r\n              eventId: eventRegistrationDetails.EVENT_ID,\r\n              eventName: eventRegistrationDetails.EVENT_NAME,\r\n              eventDescription: eventRegistrationDetails.EVENT_DESCRIPTION,\r\n              eventStartDate: eventRegistrationDetails.EVENT_START_DATE,\r\n              eventEndDate: eventRegistrationDetails.EVENT_END_DATE,\r\n              eventMetricType: eventRegistrationDetails.EVENT_METRIC_TYPE,\r\n              eventMetricValue: eventRegistrationDetails.EVENT_METRIC_VALUE,\r\n              runId: eventRegistrationDetails.RUN_ID\r\n            };\r\n            return updatedEventRegistration;\r\n          });\r\n\r\n          //Async Dispatch Event Registration State Update\r\n          dispatch({\r\n            type: UPDATE_EVENT_REGISTRATION_DETAILS,\r\n            eventRegistrationDetails: updatedEventRegistrationDetails\r\n          });\r\n        }\r\n        //In case there is no data in local store, go to server\r\n        else {\r\n          //Async Dispatch Load Event Registration from Server Action\r\n          dispatch(loadEventRegistrationDetailsFromServer(0)).then((response) => {\r\n            if (response.status >= StatusCodes.BAD_REQUEST) {\r\n              //Do nothing\r\n            } else if (response.data && response.data.eventDetails.length > 0) {\r\n              response.data.eventDetails.map((eventDetails) => {\r\n                //Hydrate Local DB\r\n                insertEventRegistrationDetails(eventDetails.eventId, eventDetails.eventName, eventDetails.eventDescription, eventDetails.eventStartDate, eventDetails.eventEndDate, eventDetails.eventMetricType, eventDetails.eventMetricValue, eventDetails.runId);\r\n              });\r\n            }\r\n          });\r\n        }\r\n      })\r\n      .catch(err => {\r\n\r\n      });\r\n  }\r\n};\r\n\r\n//Method to Load Event Registration Details from server based on pageNumber provided\r\nexport const loadEventRegistrationDetailsFromServer = (pageNumber) => {\r\n  return async dispatch => {\r\n    var header = await dispatch(getUserAuthenticationToken());\r\n    var userId = header.USER_ID;\r\n\r\n    var networkStatus = await NetInfo.fetch().then(state => {\r\n      if (!state.isConnected) {\r\n        return new Response(StatusCodes.NO_INTERNET, null);\r\n      }\r\n    });\r\n    if (networkStatus) {\r\n      return networkStatus;\r\n    }\r\n\r\n    var URL = configData.SERVER_URL + \"event-registration/getRegisteredEventsForUser/\" + userId;\r\n    return fetch(URL, {\r\n        method: 'GET',\r\n        headers: header\r\n      }).then(response => response.json())\r\n      .then((response) => {\r\n        if (response.status >= StatusCodes.BAD_REQUEST) {\r\n          return new Response(response.status, null);\r\n        } else if (response.eventDetails.length > 0) {\r\n          var updatedEventRegistrationDetails = response.eventDetails.map((eventDetails) => {\r\n            var updatedEventRegisration = {\r\n              eventId: eventRegistrationDetails.eventId,\r\n              eventName: eventRegistrationDetails.eventName,\r\n              eventDescription: eventRegistrationDetails.eventDescription,\r\n              eventStartDate: eventRegistrationDetails.eventStartDate,\r\n              eventEndDate: eventRegistrationDetails.eventEndDate,\r\n              eventMetricType: eventRegistrationDetails.eventMetricType,\r\n              eventMetricValue: eventRegistrationDetails.eventMetricValue,\r\n              runId: eventRegistrationDetails.runId\r\n            };\r\n            return updatedEventRegisration;\r\n          });\r\n\r\n          //Async Dispatch Event Registration Update State\r\n          dispatch({\r\n            type: UPDATE_EVENT_REGISTRATION_DETAILS,\r\n            eventRegistrationDetails: updatedEventRegistrationDetails\r\n          })\r\n        }\r\n        return new Response(StatusCodes.OK, response);\r\n      }).catch(err => {\r\n        return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n      });\r\n  }\r\n};\r\n\r\n//Method to Load Event Result Details from server\r\nexport const loadEventResultDetailsFromServer = () => {\r\n  return async dispatch => {\r\n    var header = await dispatch(getUserAuthenticationToken());\r\n    var userId = header.USER_ID;\r\n\r\n    var networkStatus = await NetInfo.fetch().then(state => {\r\n      if (!state.isConnected) {\r\n        return new Response(StatusCodes.NO_INTERNET, null);\r\n      }\r\n    });\r\n    if (networkStatus) {\r\n      return networkStatus;\r\n    }\r\n\r\n    var URL = configData.SERVER_URL + \"event-results/\" + userId;\r\n    return fetch(URL, {\r\n        method: 'GET',\r\n        headers: header\r\n      }).then(response => response.json())\r\n      .then((response) => {\r\n        if (response.status >= StatusCodes.BAD_REQUEST) {\r\n          return new Response(response.status, null);\r\n        } else if (response.eventResultDetails && response.eventResultDetails.length > 0) {\r\n          var updatedEventResultDetails = response.eventResultDetails.map((eventResultDetails) => {\r\n            var updatedEventResult = {\r\n              eventId: eventResultDetails.eventId,\r\n              runId: eventResultDetails.runId,\r\n              userRank: eventResultDetails.userRank\r\n            };\r\n            return updatedEventResult;\r\n          });\r\n\r\n          //Async Dispatch Event Result Update State\r\n          dispatch({\r\n            type: UPDATE_EVENT_RESULT_DETAILS,\r\n            eventResultDetails: updatedEventResultDetails\r\n          })\r\n        }\r\n        return new Response(StatusCodes.OK, response);\r\n      }).catch(err => {\r\n        return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n      });\r\n  }\r\n};\r\n\r\n//Method to Update Run Id in Event Registration\r\nexport const updateRunDetailsInEventRegistration = (eventId, runId) => {\r\n  return async dispatch => {\r\n    var updatedEventRegistrationDetails = {\r\n      eventId: eventId,\r\n      runId: runId\r\n    };\r\n    //Async Dispatch Update Event Registration Details in Local DB\r\n    updateEventRegistrationDetails(eventId, runId);\r\n\r\n    //Async Dispatch Update Event Registration State\r\n    dispatch({\r\n      type: UPDATE_RUN_IN_EVENT_REGISTRATION,\r\n      updatedEventRegistrationDetails: updatedEventRegistrationDetails\r\n    });\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}