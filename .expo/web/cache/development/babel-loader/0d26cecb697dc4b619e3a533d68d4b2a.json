{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NetInfo from '@react-native-community/netinfo';\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport configData from \"../config/config.json\";\nimport StatusCodes from \"../utils/StatusCodes.json\";\nimport * as userActions from \"./user-actions\";\nimport Response from \"../models/response\";\nimport UserAuthenticationDetails from \"../models/userAuthenticationDetails\";\nexport var UPDATE_USER_AUTH_DETAILS = 'UPDATE_USER_AUTH_DETAILS';\nexport var CLEAN_AUTH_STATE = 'CLEAN_AUTH_STATE';\nexport var loadUserAuthDetails = function loadUserAuthDetails() {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", dispatch(fetchUserAuthDetails()).then(function (response) {\n              if (response.status >= StatusCodes.BAD_REQUEST) {\n                return new Response(response.status, null);\n              } else if (response.data.userId !== null) {\n                dispatch({\n                  type: UPDATE_USER_AUTH_DETAILS,\n                  authDetails: response.data\n                });\n              }\n\n              return new Response(StatusCodes.OK, response.data);\n            }).catch(function (err) {\n              return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var generateOTPForMSISDN = function generateOTPForMSISDN(msisdn) {\n  return function _callee2(dispatch) {\n    var networkStatus, URL;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(NetInfo.fetch().then(function (state) {\n              if (!state.isConnected) {\n                return new Response(StatusCodes.NO_INTERNET, null);\n              }\n            }));\n\n          case 2:\n            networkStatus = _context2.sent;\n\n            if (!networkStatus) {\n              _context2.next = 5;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", networkStatus);\n\n          case 5:\n            URL = configData.SERVER_URL + \"auth/getOTP/\" + msisdn;\n            return _context2.abrupt(\"return\", fetch(URL, {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            }).then(function (response) {\n              return response.json();\n            }).then(function (response) {\n              if (response.status >= StatusCodes.BAD_REQUEST) {\n                return new Response(response.status, null);\n              } else {\n                return new Response(StatusCodes.OK, response);\n              }\n            }).catch(function (err) {\n              return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\n            }));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var validateOTPForMSISDN = function validateOTPForMSISDN(msisdn, otpCode) {\n  return function _callee3(dispatch) {\n    var networkStatus, URL;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(NetInfo.fetch().then(function (state) {\n              if (!state.isConnected) {\n                return new Response(StatusCodes.NO_INTERNET, null);\n              }\n            }));\n\n          case 2:\n            networkStatus = _context3.sent;\n\n            if (!networkStatus) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", networkStatus);\n\n          case 5:\n            URL = configData.SERVER_URL + \"auth/validateOTP/\" + msisdn + \"?otpCode=\" + otpCode;\n            return _context3.abrupt(\"return\", fetch(URL, {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            }).then(function (response) {\n              return response.json();\n            }).then(function (response) {\n              if (response.status >= StatusCodes.BAD_REQUEST) {\n                return new Response(response.status, null);\n              } else if (response.isValid === true) {\n                dispatch({\n                  type: UPDATE_USER_AUTH_DETAILS,\n                  authDetails: response\n                });\n                return dispatch(updateUserAuthenticationDetailsInDB(response)).then(function (response) {\n                  if (response.status >= StatusCodes.BAD_REQUEST) {\n                    return new Response(response.status, null);\n                  } else {\n                    return new Response(StatusCodes.OK, response.data);\n                  }\n                });\n              } else {\n                return new Response(StatusCodes.OK, response);\n              }\n            }).catch(function (err) {\n              return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\n            }));\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar updateUserAuthenticationDetailsInDB = function updateUserAuthenticationDetailsInDB(userAuthenticationDetails) {\n  return function _callee4(dispatch) {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('USER_ID', userAuthenticationDetails.userId));\n\n          case 3:\n            _context4.next = 5;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('USER_SECRET_KEY', userAuthenticationDetails.secret));\n\n          case 5:\n            return _context4.abrupt(\"return\", new Response(StatusCodes.OK, userAuthenticationDetails));\n\n          case 8:\n            _context4.prev = 8;\n            _context4.t0 = _context4[\"catch\"](0);\n            return _context4.abrupt(\"return\", new Response(StatusCodes.INTERNAL_SERVER_ERROR, null));\n\n          case 11:\n            ;\n\n          case 12:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n};\n\nvar fetchUserAuthDetails = function fetchUserAuthDetails() {\n  return function _callee5(dispatch) {\n    var userId, userSecretKey, userAuthDetails;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('USER_ID'));\n\n          case 3:\n            userId = _context5.sent;\n            _context5.next = 6;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('USER_SECRET_KEY'));\n\n          case 6:\n            userSecretKey = _context5.sent;\n            userAuthDetails = new UserAuthenticationDetails(userId, userSecretKey);\n            return _context5.abrupt(\"return\", new Response(StatusCodes.OK, userAuthDetails));\n\n          case 11:\n            _context5.prev = 11;\n            _context5.t0 = _context5[\"catch\"](0);\n            return _context5.abrupt(\"return\", new Response(StatusCodes.INTERNAL_SERVER_ERROR, null));\n\n          case 14:\n            ;\n\n          case 15:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n};","map":{"version":3,"sources":["F:/ReactNative/onehealthclient/onehealthclient/store/auth-actions.js"],"names":["NetInfo","configData","StatusCodes","userActions","Response","UserAuthenticationDetails","UPDATE_USER_AUTH_DETAILS","CLEAN_AUTH_STATE","loadUserAuthDetails","dispatch","fetchUserAuthDetails","then","response","status","BAD_REQUEST","data","userId","type","authDetails","OK","catch","err","INTERNAL_SERVER_ERROR","generateOTPForMSISDN","msisdn","fetch","state","isConnected","NO_INTERNET","networkStatus","URL","SERVER_URL","method","headers","json","validateOTPForMSISDN","otpCode","isValid","updateUserAuthenticationDetailsInDB","userAuthenticationDetails","AsyncStorage","setItem","secret","getItem","userSecretKey","userAuthDetails"],"mappings":"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","sourcesContent":["import NetInfo from '@react-native-community/netinfo';\r\nimport {AsyncStorage} from 'react-native';\r\nimport configData from \"../config/config.json\";\r\nimport StatusCodes from \"../utils/StatusCodes.json\";\r\nimport * as userActions from './user-actions';\r\nimport Response from '../models/response';\r\nimport UserAuthenticationDetails from '../models/userAuthenticationDetails';\r\n\r\nexport const UPDATE_USER_AUTH_DETAILS = 'UPDATE_USER_AUTH_DETAILS';\r\nexport const CLEAN_AUTH_STATE = 'CLEAN_AUTH_STATE';\r\n\r\n//Method to load User Auth Details from Async Storage and update state\r\nexport const loadUserAuthDetails = () => {\r\n  return async dispatch => {\r\n    //Sync Fetch Auth Details from Local DB\r\n    return dispatch(fetchUserAuthDetails()).then((response) => {\r\n        if (response.status >= StatusCodes.BAD_REQUEST) {\r\n          return new Response(response.status, null);\r\n        } else if (response.data.userId !== null) {\r\n          //Async Dispatch User Auth Details Update State\r\n          dispatch({\r\n            type: UPDATE_USER_AUTH_DETAILS,\r\n            authDetails: response.data\r\n          });\r\n        }\r\n        return new Response(StatusCodes.OK, response.data);\r\n      })\r\n      .catch(err => {\r\n        return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n      });\r\n  }\r\n};\r\n\r\n//TODO MSISDN should be encrypted\r\n//Generate OTP for MSISDN Sync Action\r\nexport const generateOTPForMSISDN = (msisdn) => {\r\n  return async dispatch => {\r\n    var networkStatus = await NetInfo.fetch().then(state => {\r\n      if (!state.isConnected) {\r\n        return new Response(StatusCodes.NO_INTERNET, null);\r\n      }\r\n    });\r\n    if (networkStatus) {\r\n      return networkStatus;\r\n    }\r\n\r\n    var URL = configData.SERVER_URL + \"auth/getOTP/\" + msisdn;\r\n    return fetch(URL, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }).then(response => response.json())\r\n      .then((response) => {\r\n        if (response.status >= StatusCodes.BAD_REQUEST) {\r\n          return new Response(response.status, null);\r\n        } else {\r\n          return new Response(StatusCodes.OK, response);\r\n        }\r\n      }).catch(err => {\r\n        return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n      });\r\n  }\r\n};\r\n\r\n//Sync Method to Validate entered OTP and update state and hydrate local DB\r\nexport const validateOTPForMSISDN = (msisdn, otpCode) => {\r\n  return async dispatch => {\r\n    var networkStatus = await NetInfo.fetch().then(state => {\r\n      if (!state.isConnected) {\r\n        return new Response(StatusCodes.NO_INTERNET, null);\r\n      }\r\n    });\r\n    if (networkStatus) {\r\n      return networkStatus;\r\n    }\r\n\r\n    var URL = configData.SERVER_URL + \"auth/validateOTP/\" + msisdn + \"?otpCode=\" + otpCode;\r\n    return fetch(URL, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        }\r\n      }).then(response => response.json())\r\n      .then((response) => {\r\n        if (response.status >= StatusCodes.BAD_REQUEST) {\r\n          return new Response(response.status, null);\r\n        } else if (response.isValid === true) {\r\n          //Async dispatch to update state for Auth Details\r\n          dispatch({\r\n            type: UPDATE_USER_AUTH_DETAILS,\r\n            authDetails: response\r\n          });\r\n          //Sync dispatch to update Auth Details in Async Storage\r\n          return dispatch(updateUserAuthenticationDetailsInDB(response)).then((response) => {\r\n            if (response.status >= StatusCodes.BAD_REQUEST) {\r\n              return new Response(response.status, null);\r\n            } else {\r\n              return new Response(StatusCodes.OK, response.data);\r\n            }\r\n          });\r\n        } else {\r\n          return new Response(StatusCodes.OK, response);\r\n        }\r\n      }).catch(err => {\r\n        return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n      });\r\n  }\r\n};\r\n\r\n//Private Method to Update Auth Details in Async Storage\r\nconst updateUserAuthenticationDetailsInDB = (userAuthenticationDetails) => {\r\n  return async dispatch => {\r\n    try {\r\n      await AsyncStorage.setItem('USER_ID', userAuthenticationDetails.userId);\r\n      await AsyncStorage.setItem('USER_SECRET_KEY', userAuthenticationDetails.secret);\r\n      return new Response(StatusCodes.OK, userAuthenticationDetails);\r\n    } catch (err) {\r\n      return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n    };\r\n  }\r\n};\r\n\r\n//Private Method to Fetch User Details from Async Storage\r\nconst fetchUserAuthDetails = () => {\r\n  return async dispatch => {\r\n    try {\r\n      var userId = await AsyncStorage.getItem('USER_ID');\r\n      var userSecretKey = await AsyncStorage.getItem('USER_SECRET_KEY');\r\n      var userAuthDetails = new UserAuthenticationDetails(userId, userSecretKey);\r\n      return new Response(StatusCodes.OK, userAuthDetails);\r\n    } catch (err) {\r\n      return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n    };\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}