{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"F:\\\\ReactNative\\\\onehealthclient\\\\onehealthclient\\\\screens\\\\LiveRunTracker.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { scale, moderateScale, verticalScale } from \"../utils/Utils\";\nimport * as Location from 'expo-location';\nimport { DeviceMotion, Pedometer } from 'expo-sensors';\nimport Slider from \"../components/Slider\";\nimport { Ionicons } from '@expo/vector-icons';\nimport RunDetails from \"../models/rundetails\";\nvar startTime = Date.now();\nvar eventId = 0;\nvar timerForAutoPause = 0;\nvar runDistanceForAutoPause = 0;\nvar runDetails = null;\nvar updateStepsListener = null;\nvar updateLocationListener = null;\nvar rangeOfAcceleration = [0.3, 2, 10, 15, 40, 60, 80];\nvar rangeOfMultiplyingFactor = [0.30, 0.40, 0.52, 0.60, 0.68, 0.83, 1.07];\nvar strideMultiplyingFactor = 0.30;\nvar averageAcceleration = 0.3;\nvar accelerationValues = [];\nvar prevStepsCount = 0;\nvar stepsCount = 0;\nvar changeInStepsCount = 0;\n\nvar LiveRunTrackerScreen = function LiveRunTrackerScreen(props) {\n  var userDetails = useSelector(function (state) {\n    return state.userDetails;\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isPaused = _useState2[0],\n      setIsPaused = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      runDistance = _useState4[0],\n      setRunDistance = _useState4[1];\n\n  var _useState5 = useState(12.5),\n      _useState6 = _slicedToArray(_useState5, 2),\n      runPace = _useState6[0],\n      setRunPace = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      stepsCountUI = _useState8[0],\n      setStepsCountUI = _useState8[1];\n\n  var _useState9 = useState({\n    seconds: \"00\",\n    minutes: \"00\",\n    hours: \"00\"\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      trackTimer = _useState10[0],\n      setTrackTimer = _useState10[1];\n\n  var weekday = new Array(7);\n  weekday[0] = \"Sunday\";\n  weekday[1] = \"Monday\";\n  weekday[2] = \"Tuesday\";\n  weekday[3] = \"Wednesday\";\n  weekday[4] = \"Thursday\";\n  weekday[5] = \"Friday\";\n  weekday[6] = \"Saturday\";\n  useEffect(function () {\n    var today = new Date();\n    var runDate = today.getDate() + \"/\" + parseInt(today.getMonth() + 1) + \"/\" + today.getFullYear();\n    var runDay = weekday[today.getDay()];\n    startTime = Date.now();\n    eventId = props.route.params.eventId;\n    subscribePedometer();\n    subscribeAccelerometer();\n    subscribeLocationUpdates();\n    runDetails = new RunDetails(today.getTime(), 0, 0, runPace, 0, 0, today.toJSON(), runDate, runDay, [], \"\", eventId, \"0\");\n  }, []);\n\n  var subscribePedometer = function subscribePedometer() {\n    updateStepsListener = Pedometer.watchStepCount(function (updatedSteps) {\n      updateStepsCount(updatedSteps);\n    });\n  };\n\n  var unSubscribePedometer = function unSubscribePedometer() {\n    prevStepsCount = 0;\n\n    if (updateStepsListener) {\n      updateStepsListener.remove();\n    }\n  };\n\n  var updateStepsCount = function updateStepsCount(updatedSteps) {\n    updateDistanceBasedOnChangeInStepsCount(updatedSteps.steps - prevStepsCount);\n    setStepsCountUI(function (stepsCountUI) {\n      return stepsCountUI + (updatedSteps.steps - prevStepsCount);\n    });\n    prevStepsCount = updatedSteps.steps;\n  };\n\n  var updateDistanceBasedOnChangeInStepsCount = function updateDistanceBasedOnChangeInStepsCount(changeInStepsCount) {\n    if (changeInStepsCount > 0) {\n      accelerationValues = [];\n      runDistanceForAutoPause = runDistanceForAutoPause + 1;\n      var minStrideMultiplier = 0.30;\n      var maxStrideMultiplier = 0.40;\n      var minPace = 10;\n      var maxPace = 2;\n\n      for (var i = 0; i < rangeOfAcceleration.length - 1; i++) {\n        if (averageAcceleration >= rangeOfAcceleration[i] && averageAcceleration <= rangeOfAcceleration[i + 1]) {\n          minStrideMultiplier = rangeOfMultiplyingFactor[i];\n          maxStrideMultiplier = rangeOfMultiplyingFactor[i + 1];\n          minPace = rangeOfAcceleration[i + 1];\n          maxPace = rangeOfAcceleration[i];\n          break;\n        }\n      }\n\n      strideMultiplyingFactor = maxStrideMultiplier - (averageAcceleration - minPace) / (maxPace - minPace) * (maxStrideMultiplier - minStrideMultiplier);\n      var strideValue = parseInt(userDetails.userHeight) * strideMultiplyingFactor;\n      var changeInDistanceInMeters = changeInStepsCount * strideValue / 100;\n      setRunDistance(function (prevDistance) {\n        var newDistance = prevDistance + changeInDistanceInMeters;\n        runDetails.runDistance = newDistance;\n        updatePaceAndCalories(newDistance);\n        return newDistance;\n      });\n    }\n  };\n\n  var updatePaceAndCalories = function updatePaceAndCalories(runDistance) {\n    if (runDistance > 0) {\n      var lapsedTimeinMinutes = runDetails.runTotalTime / 60000;\n      var averagePace = lapsedTimeinMinutes / (runDistance / 1000);\n\n      if (averagePace < 12.5) {\n        runDetails.runPace = averagePace;\n        setRunPace(averagePace);\n      }\n\n      var lapsedTimeinHours = lapsedTimeinMinutes / 60;\n      var averagePaceKmPerHour = runDistance / 1000 / lapsedTimeinHours;\n      var caloriesBurnt = parseInt(averagePaceKmPerHour * 3.5 * parseInt(userDetails.userWeight) / 200) * lapsedTimeinMinutes;\n      runDetails.runCaloriesBurnt = caloriesBurnt;\n    }\n  };\n\n  var subscribeLocationUpdates = function subscribeLocationUpdates() {\n    Location.requestPermissionsAsync().then(function (response) {\n      if (response.status !== 'granted') {} else {\n        updateLocationListener = Location.watchPositionAsync({\n          accuracy: Location.Accuracy.Highest,\n          timeInterval: 1000,\n          distanceInterval: 10\n        }, function (updatedLocation) {\n          updateLocation(updatedLocation);\n        });\n      }\n    });\n  };\n\n  var updateLocation = function updateLocation(updatedLocation) {\n    if (!isPaused) {\n      var location = updatedLocation;\n      var currentLocation = {\n        latitude: location.coords.latitude,\n        longitude: location.coords.longitude,\n        latitudeDelta: 0.000757,\n        longitudeDelta: 0.0008,\n        weight: 2\n      };\n      runDetails.runPath = [].concat(_toConsumableArray(runDetails.runPath), [currentLocation]);\n    }\n  };\n\n  var subscribeAccelerometer = function subscribeAccelerometer() {\n    DeviceMotion.addListener(function (accelerometerData) {\n      updateAccelerometerData(accelerometerData);\n    });\n  };\n\n  var unSubscribeAccelerometer = function unSubscribeAccelerometer() {\n    DeviceMotion.removeAllListeners();\n  };\n\n  var updateAccelerometerData = function updateAccelerometerData(accelerometerData) {\n    (function _callee() {\n      var currentTime, updatedLapsedTime, secondsVar, minutesVar, hoursVar, magnitude, sum;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              DeviceMotion.setUpdateInterval(1000);\n\n              if (timerForAutoPause >= 30 && runDistanceForAutoPause < 1) {\n                timerForAutoPause = 0;\n                runDistanceForAutoPause = 0;\n                pauseRun();\n              }\n\n              if (timerForAutoPause >= 20) {\n                timerForAutoPause = 0;\n                runDistanceForAutoPause = 0;\n              } else {\n                timerForAutoPause = timerForAutoPause + 1;\n              }\n\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Date.now());\n\n            case 5:\n              currentTime = _context.sent;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(runDetails.runTotalTime);\n\n            case 8:\n              _context.t0 = _context.sent;\n              _context.t1 = currentTime - startTime;\n              updatedLapsedTime = _context.t0 + _context.t1;\n              _context.next = 13;\n              return _regeneratorRuntime.awrap((\"0\" + Math.floor(updatedLapsedTime / 1000) % 60).slice(-2));\n\n            case 13:\n              secondsVar = _context.sent;\n              _context.next = 16;\n              return _regeneratorRuntime.awrap((\"0\" + Math.floor(updatedLapsedTime / 60000) % 60).slice(-2));\n\n            case 16:\n              minutesVar = _context.sent;\n              _context.next = 19;\n              return _regeneratorRuntime.awrap((\"0\" + Math.floor(updatedLapsedTime / 3600000)).slice(-2));\n\n            case 19:\n              hoursVar = _context.sent;\n              setTrackTimer({\n                seconds: secondsVar,\n                minutes: minutesVar,\n                hours: hoursVar\n              });\n              runDetails.runTotalTime = updatedLapsedTime;\n              startTime = currentTime;\n              magnitude = Math.sqrt(accelerometerData.acceleration.x * accelerometerData.acceleration.x + accelerometerData.acceleration.y * accelerometerData.acceleration.y + accelerometerData.acceleration.z * accelerometerData.acceleration.z);\n              accelerationValues.push(magnitude);\n              sum = accelerationValues.reduce(function (a, b) {\n                return a + b;\n              }, 0);\n              averageAcceleration = sum / accelerationValues.length || 0.3;\n\n            case 27:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  };\n\n  var stopRun = function stopRun() {\n    if (runDistance > 10) {\n      props.navigation.navigate('RunDetailsScreen', {\n        runDetails: runDetails\n      });\n    } else {\n      props.navigation.navigate('HomeScreen');\n    }\n  };\n\n  var pauseRun = function pauseRun() {\n    setIsPaused(true);\n    unSubscribeAccelerometer();\n    unSubscribePedometer();\n    accelerationValues = [];\n  };\n\n  var resumeRun = function resumeRun() {\n    startTime = Date.now();\n    setIsPaused(false);\n    subscribeAccelerometer();\n    subscribePedometer();\n  };\n\n  return React.createElement(View, {\n    style: styles.liveRunTrackerContainerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 2\n    }\n  }, !isPaused ? React.createElement(TouchableOpacity, {\n    style: styles.pauseResumeRunButtonStyle,\n    onPress: function onPress() {\n      pauseRun();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 5\n    }\n  }, React.createElement(Ionicons, {\n    name: Platform.OS === 'android' ? \"md-pause\" : \"ios-pause\",\n    size: 48,\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 6\n    }\n  })) : React.createElement(TouchableOpacity, {\n    style: styles.pauseResumeRunButtonStyle,\n    onPress: function onPress() {\n      resumeRun();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 5\n    }\n  }, React.createElement(Ionicons, {\n    name: Platform.OS === 'android' ? \"md-play\" : \"ios-play\",\n    size: 48,\n    color: \"white\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 6\n    }\n  })), isPaused ? React.createElement(View, {\n    style: styles.sliderContainerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 5\n    }\n  }, React.createElement(Slider, {\n    sliderAction: stopRun,\n    buttonTitle: \"Stop\",\n    bounceValue: 220,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 4\n    }\n  })) : React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 14\n    }\n  }), React.createElement(View, {\n    style: styles.runPaceContainerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 2\n    }\n  }, React.createElement(Ionicons, {\n    name: Platform.OS === 'android' ? \"md-speedometer\" : \"ios-speedometer\",\n    size: 24,\n    color: \"lightgrey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 3\n    }\n  }), React.createElement(Text, {\n    style: styles.smallTextStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 3\n    }\n  }, parseFloat(runPace).toFixed(2))), React.createElement(View, {\n    style: styles.runTotalTimeContainerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 2\n    }\n  }, React.createElement(Ionicons, {\n    name: Platform.OS === 'android' ? \"md-stopwatch\" : \"ios-stopwatch\",\n    size: 24,\n    color: \"lightgrey\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 3\n    }\n  }), React.createElement(Text, {\n    style: styles.smallTextStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 2\n    }\n  }, trackTimer.hours, \":\", trackTimer.minutes, \":\", trackTimer.seconds)), React.createElement(View, {\n    style: styles.distanceContainerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 2\n    }\n  }, React.createElement(Text, {\n    style: styles.largeTextStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 3\n    }\n  }, parseFloat(runDistance / 1000).toFixed(2)), React.createElement(Text, {\n    style: styles.mediumTextStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 3\n    }\n  }, \"KM\")), React.createElement(View, {\n    style: styles.testPosition,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 6\n    }\n  }, stepsCountUI)));\n};\n\nvar styles = StyleSheet.create({\n  liveRunTrackerContainerStyle: {\n    flex: 1,\n    flexDirection: 'column',\n    backgroundColor: 'black'\n  },\n  runPaceContainerStyle: {\n    position: 'absolute',\n    flexDirection: 'column',\n    alignSelf: 'flex-start',\n    alignItems: 'center',\n    marginTop: '10%',\n    marginLeft: '5%'\n  },\n  runTotalTimeContainerStyle: {\n    position: 'absolute',\n    flexDirection: 'column',\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n    marginTop: '10%',\n    marginRight: '5%'\n  },\n  distanceContainerStyle: {\n    position: 'absolute',\n    top: '25%',\n    alignSelf: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: verticalScale(200),\n    height: verticalScale(200),\n    borderRadius: verticalScale(100),\n    borderWidth: 3,\n    borderColor: 'springgreen',\n    backgroundColor: 'black',\n    shadowColor: 'springgreen',\n    shadowOffset: {\n      width: 1,\n      height: 2\n    },\n    shadowOpacity: 1,\n    shadowRadius: 6\n  },\n  pauseResumeRunButtonStyle: {\n    position: 'absolute',\n    top: '63%',\n    alignSelf: 'center',\n    alignItems: 'center',\n    justifyContent: 'center',\n    opacity: 0.7,\n    width: verticalScale(80),\n    height: verticalScale(80),\n    borderRadius: verticalScale(80 / 2),\n    borderColor: 'springgreen',\n    borderWidth: 2,\n    backgroundColor: 'black',\n    shadowColor: 'springgreen',\n    shadowOffset: {\n      width: 1,\n      height: 2\n    },\n    shadowOpacity: 1,\n    shadowRadius: 6\n  },\n  sliderContainerStyle: {\n    top: '80%'\n  },\n  largeTextStyle: {\n    fontSize: moderateScale(45, 0.8),\n    color: 'lightgrey'\n  },\n  mediumTextStyle: {\n    fontSize: moderateScale(40, 0.8),\n    color: 'lightgrey'\n  },\n  smallTextStyle: {\n    padding: '3%',\n    fontSize: moderateScale(30, 0.8),\n    color: 'lightgrey'\n  },\n  textTest: {\n    fontSize: moderateScale(20, 0.8),\n    color: 'black',\n    alignSelf: 'center'\n  },\n  testPosition: {\n    position: 'absolute',\n    top: '50%',\n    width: verticalScale(200),\n    height: verticalScale(60),\n    backgroundColor: 'white',\n    alignSelf: 'center'\n  }\n});\nexport default LiveRunTrackerScreen;","map":{"version":3,"sources":["F:/ReactNative/onehealthclient/onehealthclient/screens/LiveRunTracker.js"],"names":["React","useState","useEffect","useSelector","scale","moderateScale","verticalScale","Location","DeviceMotion","Pedometer","Slider","Ionicons","RunDetails","startTime","Date","now","eventId","timerForAutoPause","runDistanceForAutoPause","runDetails","updateStepsListener","updateLocationListener","rangeOfAcceleration","rangeOfMultiplyingFactor","strideMultiplyingFactor","averageAcceleration","accelerationValues","prevStepsCount","stepsCount","changeInStepsCount","LiveRunTrackerScreen","props","userDetails","state","isPaused","setIsPaused","runDistance","setRunDistance","runPace","setRunPace","stepsCountUI","setStepsCountUI","seconds","minutes","hours","trackTimer","setTrackTimer","weekday","Array","today","runDate","getDate","parseInt","getMonth","getFullYear","runDay","getDay","route","params","subscribePedometer","subscribeAccelerometer","subscribeLocationUpdates","getTime","toJSON","watchStepCount","updatedSteps","updateStepsCount","unSubscribePedometer","remove","updateDistanceBasedOnChangeInStepsCount","steps","minStrideMultiplier","maxStrideMultiplier","minPace","maxPace","i","length","strideValue","userHeight","changeInDistanceInMeters","prevDistance","newDistance","updatePaceAndCalories","lapsedTimeinMinutes","runTotalTime","averagePace","lapsedTimeinHours","averagePaceKmPerHour","caloriesBurnt","userWeight","runCaloriesBurnt","requestPermissionsAsync","then","response","status","watchPositionAsync","accuracy","Accuracy","Highest","timeInterval","distanceInterval","updatedLocation","updateLocation","location","currentLocation","latitude","coords","longitude","latitudeDelta","longitudeDelta","weight","runPath","addListener","accelerometerData","updateAccelerometerData","unSubscribeAccelerometer","removeAllListeners","setUpdateInterval","pauseRun","currentTime","updatedLapsedTime","Math","floor","slice","secondsVar","minutesVar","hoursVar","magnitude","sqrt","acceleration","x","y","z","push","sum","reduce","a","b","stopRun","navigation","navigate","resumeRun","styles","liveRunTrackerContainerStyle","pauseResumeRunButtonStyle","Platform","OS","sliderContainerStyle","runPaceContainerStyle","smallTextStyle","parseFloat","toFixed","runTotalTimeContainerStyle","distanceContainerStyle","largeTextStyle","mediumTextStyle","testPosition","StyleSheet","create","flex","flexDirection","backgroundColor","position","alignSelf","alignItems","marginTop","marginLeft","marginRight","top","justifyContent","width","height","borderRadius","borderWidth","borderColor","shadowColor","shadowOffset","shadowOpacity","shadowRadius","opacity","fontSize","color","padding","textTest"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport { View, Text, StyleSheet, TouchableOpacity, Button, Platform} from 'react-native';\r\nimport { scale, moderateScale, verticalScale} from '../utils/Utils';\r\nimport * as Location from 'expo-location';\r\nimport { DeviceMotion, Pedometer } from 'expo-sensors';\r\nimport Slider from '../components/Slider';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport RunDetails from '../models/rundetails';\r\n\r\nlet startTime=Date.now();\r\nlet eventId=0;\r\nlet timerForAutoPause=0;\r\nlet runDistanceForAutoPause=0;\r\nlet runDetails=null;\r\n\r\n//Variables for Listeners\r\nlet updateStepsListener=null;\r\nlet updateLocationListener=null;\r\n\r\nlet rangeOfAcceleration=[0.3,2,10,15,40,60,80];\r\nlet rangeOfMultiplyingFactor=[0.30,0.40, 0.52, 0.60, 0.68, 0.83, 1.07];\r\nlet strideMultiplyingFactor=0.30;//Default Multiplier based on 12.5 average pace\r\nlet averageAcceleration=0.3;//Default Acceleration Value based on 12.5 average pace\r\nlet accelerationValues=[];\r\n\r\nlet prevStepsCount=0;\r\nlet stepsCount=0;\r\nlet changeInStepsCount=0;\r\n\r\n//Live Run Tracker Screen, uses 3 sensors for operation (pedometer, accelerometer, gps)\r\nconst LiveRunTrackerScreen = props=>{\r\n\r\n  // State Selectors\r\n  const userDetails = useSelector(state => state.userDetails);\r\n\r\n  //State Variables\r\n  const [isPaused, setIsPaused] = useState(false);\r\n  const [runDistance, setRunDistance] = useState(0);\r\n  const [runPace, setRunPace] = useState(12.5);\r\n  //To be removed\r\n  const [stepsCountUI, setStepsCountUI] = useState(0);\r\n\r\n  const [trackTimer, setTrackTimer] = useState({\r\n    seconds: \"00\",\r\n    minutes: \"00\",\r\n    hours: \"00\"\r\n  });\r\n\r\n  var weekday = new Array(7);\r\n  weekday[0] = \"Sunday\";\r\n  weekday[1] = \"Monday\";\r\n  weekday[2] = \"Tuesday\";\r\n  weekday[3] = \"Wednesday\";\r\n  weekday[4] = \"Thursday\";\r\n  weekday[5] = \"Friday\";\r\n  weekday[6] = \"Saturday\";\r\n\r\n  //Load Time useEffect hook\r\n  useEffect(() => {\r\n    var today = new Date();\r\n    var runDate = today.getDate() + \"/\" + parseInt(today.getMonth() + 1) + \"/\" + today.getFullYear();\r\n    var runDay = weekday[today.getDay()];\r\n    startTime = Date.now();\r\n    eventId = props.route.params.eventId;\r\n    subscribePedometer();\r\n    subscribeAccelerometer();\r\n    subscribeLocationUpdates();\r\n    runDetails = new RunDetails(today.getTime(), 0, 0, runPace, 0, 0,  today.toJSON(), runDate, runDay, [], \"\", eventId, \"0\");\r\n  }, []);\r\n\r\n  //Subscribe Pedometer to count steps\r\n  const subscribePedometer = () => {\r\n    updateStepsListener = Pedometer.watchStepCount((updatedSteps) => {\r\n      updateStepsCount(updatedSteps);\r\n    });\r\n  };\r\n\r\n  //UnSubscribe Pedometer Updates\r\n  const unSubscribePedometer = () => {\r\n    prevStepsCount=0;\r\n    if (updateStepsListener) {\r\n      updateStepsListener.remove();\r\n    }\r\n  };\r\n\r\n  //Pedometer's Updates Listener\r\n  const updateStepsCount = (updatedSteps) => {\r\n    //Sync call to Update Distance\r\n    updateDistanceBasedOnChangeInStepsCount(updatedSteps.steps - prevStepsCount);\r\n    //To be removed\r\n    setStepsCountUI((stepsCountUI) => {\r\n      return stepsCountUI + (updatedSteps.steps - prevStepsCount);\r\n    });\r\n    prevStepsCount = updatedSteps.steps;\r\n  };\r\n\r\n  //Sync Update distance once steps count changes\r\n  const updateDistanceBasedOnChangeInStepsCount = (changeInStepsCount) => {\r\n    if (changeInStepsCount > 0) {\r\n      //Empty the array to calculate average acceleration\r\n      accelerationValues = [];\r\n      runDistanceForAutoPause = runDistanceForAutoPause + 1;\r\n\r\n      var minStrideMultiplier = 0.30;\r\n      var maxStrideMultiplier = 0.40;\r\n      var minPace = 10;\r\n      var maxPace = 2;\r\n\r\n      for (var i = 0; i < rangeOfAcceleration.length - 1; i++) {\r\n        if (averageAcceleration >= rangeOfAcceleration[i] &&\r\n          averageAcceleration <= rangeOfAcceleration[i + 1]) {\r\n          minStrideMultiplier = rangeOfMultiplyingFactor[i];\r\n          maxStrideMultiplier = rangeOfMultiplyingFactor[i + 1];\r\n          minPace = rangeOfAcceleration[i + 1];\r\n          maxPace = rangeOfAcceleration[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      strideMultiplyingFactor = maxStrideMultiplier - (((averageAcceleration - (minPace)) / (maxPace - minPace)) *\r\n        (maxStrideMultiplier - minStrideMultiplier));\r\n      var strideValue = parseInt(userDetails.userHeight) * strideMultiplyingFactor;\r\n\r\n      var changeInDistanceInMeters = (changeInStepsCount * strideValue) / 100;\r\n\r\n      setRunDistance((prevDistance) => {\r\n        var newDistance = prevDistance + changeInDistanceInMeters;\r\n        runDetails.runDistance = newDistance;\r\n        updatePaceAndCalories(newDistance);\r\n        return newDistance;\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n  //Sync method to Update Pace And Calories based on total distance\r\n  const updatePaceAndCalories = (runDistance) => {\r\n    if (runDistance > 0) {\r\n      //Update average pace\r\n      const lapsedTimeinMinutes = runDetails.runTotalTime / 60000;\r\n      const averagePace = lapsedTimeinMinutes / (runDistance / 1000);\r\n      if (averagePace < 12.5) {\r\n        runDetails.runPace = averagePace;\r\n        setRunPace(averagePace);\r\n      }\r\n\r\n      //Update Total Calories Burnt\r\n      const lapsedTimeinHours = lapsedTimeinMinutes / 60;\r\n      const averagePaceKmPerHour = (runDistance / 1000) / lapsedTimeinHours;\r\n      const caloriesBurnt = parseInt((averagePaceKmPerHour * 3.5 * parseInt(userDetails.userWeight)) / 200) * lapsedTimeinMinutes;\r\n      runDetails.runCaloriesBurnt = caloriesBurnt;\r\n    }\r\n  };\r\n\r\n  //Subscriber for Location Updates\r\n  const subscribeLocationUpdates = () => {\r\n    Location.requestPermissionsAsync().then(response => {\r\n      if (response.status !== 'granted') {\r\n        //TODO : To handle alert to change settings\r\n        //Alert.alert(\"Location Alert\", \"Location Permission is required!!!\");\r\n        //Linking.openURL('app-settings:');\r\n      } else {\r\n        updateLocationListener = Location.watchPositionAsync({\r\n          accuracy: Location.Accuracy.Highest,\r\n          timeInterval: 1000,\r\n          distanceInterval: 10\r\n        }, (updatedLocation) => {\r\n          updateLocation(updatedLocation);\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  //Location Update Listener\r\n  const updateLocation = (updatedLocation) => {\r\n    if (!isPaused) {\r\n      let location = updatedLocation;\r\n      let currentLocation = {\r\n        latitude: location.coords.latitude,\r\n        longitude: location.coords.longitude,\r\n        latitudeDelta: 0.000757,\r\n        longitudeDelta: 0.0008,\r\n        weight: 2\r\n      };\r\n      runDetails.runPath = [...runDetails.runPath, currentLocation];\r\n    }\r\n  };\r\n\r\n  //Method to Subscribe to Accelerometer and add a listener to update every second\r\n  const subscribeAccelerometer = () => {\r\n    DeviceMotion.addListener(accelerometerData => {\r\n      updateAccelerometerData(accelerometerData);\r\n    });\r\n  };\r\n\r\n  //Method to Unsubscribe Accelerometer\r\n  const unSubscribeAccelerometer = () => {\r\n    DeviceMotion.removeAllListeners();\r\n  };\r\n\r\n  //Method to Update UI each second based on accelerometer data\r\n  const updateAccelerometerData = (accelerometerData) => {\r\n    (async () => {\r\n      DeviceMotion.setUpdateInterval(1000);\r\n      //Automatically pause the run if there is no distance tracked since last configured secs\r\n      if (timerForAutoPause >= 30 && runDistanceForAutoPause < 1) {\r\n        timerForAutoPause = 0;\r\n        runDistanceForAutoPause = 0;\r\n        pauseRun();\r\n      }\r\n      if (timerForAutoPause >= 20) {\r\n        timerForAutoPause = 0;\r\n        runDistanceForAutoPause = 0;\r\n      } else {\r\n        timerForAutoPause = timerForAutoPause + 1;\r\n      }\r\n\r\n      const currentTime = await Date.now();\r\n      let updatedLapsedTime = await runDetails.runTotalTime + (currentTime - startTime);\r\n      let secondsVar = await (\"0\" + (Math.floor(updatedLapsedTime / 1000) % 60)).slice(-2);\r\n      let minutesVar = await (\"0\" + (Math.floor(updatedLapsedTime / 60000) % 60)).slice(-2);\r\n      let hoursVar = await (\"0\" + Math.floor(updatedLapsedTime / 3600000)).slice(-2);\r\n\r\n      setTrackTimer({\r\n        seconds: secondsVar,\r\n        minutes: minutesVar,\r\n        hours: hoursVar\r\n      });\r\n\r\n      runDetails.runTotalTime = updatedLapsedTime;\r\n      startTime = currentTime;\r\n\r\n      let magnitude = Math.sqrt(accelerometerData.acceleration.x * accelerometerData.acceleration.x +\r\n        accelerometerData.acceleration.y * accelerometerData.acceleration.y +\r\n        accelerometerData.acceleration.z * accelerometerData.acceleration.z);\r\n\r\n      /*let magnitudeIncludeAcclr = Math.sqrt(accelerometerData.accelerationIncludingGravity.x * accelerometerData.accelerationIncludingGravity.x +\r\n          accelerometerData.accelerationIncludingGravity.y * accelerometerData.accelerationIncludingGravity.y +\r\n          accelerometerData.accelerationIncludingGravity.z * accelerometerData.accelerationIncludingGravity.z);*/\r\n\r\n      accelerationValues.push(magnitude);\r\n      const sum = accelerationValues.reduce((a, b) => a + b, 0);\r\n      averageAcceleration = (sum / accelerationValues.length) || 0.3;\r\n    })();\r\n  };\r\n\r\n  //Complete the run if distance more than 10m and load Run Details Screen\r\n  const stopRun = () => {\r\n    if (runDistance > 10) {\r\n      props.navigation.navigate('RunDetailsScreen', {\r\n        runDetails: runDetails\r\n      });\r\n    } else {\r\n      props.navigation.navigate('HomeScreen');\r\n    }\r\n  };\r\n\r\n  // Pause Run\r\n  const pauseRun = () => {\r\n    setIsPaused(true);\r\n    unSubscribeAccelerometer();\r\n    unSubscribePedometer();\r\n    accelerationValues = [];\r\n  };\r\n\r\n  //Resume Run\r\n  const resumeRun = () => {\r\n    startTime = Date.now();\r\n    setIsPaused(false);\r\n    subscribeAccelerometer();\r\n    subscribePedometer();\r\n  };\r\n//View\r\nreturn (\r\n <View style={styles.liveRunTrackerContainerStyle}>\r\n {!isPaused?\r\n   (\r\n    <TouchableOpacity style={styles.pauseResumeRunButtonStyle} onPress={()=>{pauseRun()}}>\r\n     <Ionicons name={Platform.OS === 'android'?\"md-pause\":\"ios-pause\"}\r\n     size={48} color='white'/>\r\n    </TouchableOpacity>\r\n    ):\r\n    (\r\n    <TouchableOpacity style={styles.pauseResumeRunButtonStyle} onPress={()=>{resumeRun()}}>\r\n     <Ionicons name={Platform.OS === 'android'?\"md-play\":\"ios-play\"}\r\n     size={48} color='white'/>\r\n    </TouchableOpacity>\r\n    )\r\n  }\r\n  {isPaused?\r\n   (<View style={styles.sliderContainerStyle}>\r\n   <Slider\r\n   sliderAction={stopRun}\r\n   buttonTitle='Stop' \r\n   bounceValue={220} \r\n   />\r\n   </View>):(<View></View>)\r\n }\r\n\r\n <View style={styles.runPaceContainerStyle}>\r\n  <Ionicons name={Platform.OS === 'android'?\"md-speedometer\":\"ios-speedometer\"}\r\n  size={24} color='lightgrey'/>\r\n  <Text style={styles.smallTextStyle}>{parseFloat(runPace).toFixed(2)}</Text>\r\n </View>\r\n\r\n <View style={styles.runTotalTimeContainerStyle}>\r\n  <Ionicons name={Platform.OS === 'android'?\"md-stopwatch\":\"ios-stopwatch\"}\r\n  size={24} color='lightgrey'/>\r\n <Text style={styles.smallTextStyle}>{trackTimer.hours}:{trackTimer.minutes}:{trackTimer.seconds}</Text>\r\n </View>\r\n\r\n <View style={styles.distanceContainerStyle}>\r\n  <Text style={styles.largeTextStyle}>{parseFloat(runDistance/1000).toFixed(2)}</Text>\r\n  <Text style={styles.mediumTextStyle}>KM</Text>\r\n </View>\r\n\r\n    <View style={styles.testPosition}>\r\n     <Text>{stepsCountUI}</Text>\r\n    </View>\r\n\r\n </View>\r\n );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  liveRunTrackerContainerStyle: {\r\n    flex: 1,\r\n    flexDirection: 'column',\r\n    backgroundColor: 'black'\r\n  },\r\n\r\n  runPaceContainerStyle: {\r\n    position: 'absolute',\r\n    flexDirection: 'column',\r\n    alignSelf: 'flex-start',\r\n    alignItems: 'center',\r\n    marginTop: '10%',\r\n    marginLeft: '5%'\r\n  },\r\n\r\n  runTotalTimeContainerStyle: {\r\n    position: 'absolute',\r\n    flexDirection: 'column',\r\n    alignSelf: 'flex-end',\r\n    alignItems: 'center',\r\n    marginTop: '10%',\r\n    marginRight: '5%'\r\n  },\r\n\r\n  distanceContainerStyle: {\r\n    position: 'absolute',\r\n    top: '25%',\r\n    alignSelf: 'center',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    width: verticalScale(200),\r\n    height: verticalScale(200),\r\n    borderRadius: verticalScale(100),\r\n    borderWidth: 3,\r\n    borderColor: 'springgreen',\r\n    backgroundColor: 'black',\r\n    shadowColor: 'springgreen',\r\n    shadowOffset: {\r\n      width: 1,\r\n      height: 2\r\n    },\r\n    shadowOpacity: 1,\r\n    shadowRadius: 6,\r\n  },\r\n\r\n  pauseResumeRunButtonStyle: {\r\n    position: 'absolute',\r\n    top: '63%',\r\n    alignSelf: 'center',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    opacity: 0.7,\r\n    width: verticalScale(80),\r\n    height: verticalScale(80),\r\n    borderRadius: verticalScale(80 / 2),\r\n    borderColor: 'springgreen',\r\n    borderWidth: 2,\r\n    backgroundColor: 'black',\r\n    shadowColor: 'springgreen',\r\n    shadowOffset: {\r\n      width: 1,\r\n      height: 2\r\n    },\r\n    shadowOpacity: 1,\r\n    shadowRadius: 6\r\n  },\r\n\r\n  sliderContainerStyle: {\r\n    top: '80%'\r\n  },\r\n\r\n  largeTextStyle: {\r\n    fontSize: moderateScale(45, 0.8),\r\n    color: 'lightgrey'\r\n  },\r\n  mediumTextStyle: {\r\n    fontSize: moderateScale(40, 0.8),\r\n    color: 'lightgrey'\r\n  },\r\n  smallTextStyle: {\r\n    padding: '3%',\r\n    fontSize: moderateScale(30, 0.8),\r\n    color: 'lightgrey'\r\n  },\r\n\r\n  textTest: {\r\n    fontSize: moderateScale(20, 0.8),\r\n    color: 'black',\r\n    alignSelf: 'center'\r\n  },\r\n  testPosition: {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    width: verticalScale(200),\r\n    height: verticalScale(60),\r\n    backgroundColor: 'white',\r\n    alignSelf: 'center'\r\n  }\r\n\r\n});\r\n\r\nexport default LiveRunTrackerScreen;"]},"metadata":{},"sourceType":"module"}