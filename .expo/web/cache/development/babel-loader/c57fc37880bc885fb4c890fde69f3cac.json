{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NetInfo from '@react-native-community/netinfo';\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport configData from \"../config/config.json\";\nimport StatusCodes from \"../utils/StatusCodes.json\";\nimport { getUserAuthenticationToken } from \"../utils/AuthenticationUtils\";\nimport UserDetails from \"../models/userDetails\";\nimport Response from \"../models/response\";\nimport { cleanUpAllData } from \"../utils/DBUtils\";\nexport var UPDATE_USER_DETAILS = 'UPDATE_USER_DETAILS';\nexport var CLEAN_USER_STATE = 'CLEAN_USER_STATE';\nexport var loadUserDetails = function loadUserDetails() {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", dispatch(fetchUserDetails()).then(function (response) {\n              if (response.status >= StatusCodes.BAD_REQUEST) {\n                return new Response(response.status, null);\n              } else if (response.data.userFirstName !== null) {\n                dispatch({\n                  type: UPDATE_USER_DETAILS,\n                  userDetails: response.data\n                });\n                return new Response(StatusCodes.OK, response.data);\n              } else {\n                return dispatch(loadUserDetailsFromServer()).then(function (response) {\n                  if (response.status >= StatusCodes.BAD_REQUEST) {\n                    return new Response(response.status, null);\n                  } else if (response.data.userFirstName !== null) {\n                    dispatch(updateUserDetailsInDB(response.data.userFirstName, response.data.userLastName, response.data.userHeight, response.data.userWeight));\n                  }\n\n                  return new Response(StatusCodes.OK, response.data);\n                });\n              }\n            }).catch(function (err) {\n              return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var loadUserDetailsFromServer = function loadUserDetailsFromServer() {\n  return function _callee2(dispatch) {\n    var header, userId, networkStatus, URL;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(dispatch(getUserAuthenticationToken()));\n\n          case 2:\n            header = _context2.sent;\n            userId = header.USER_ID;\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(NetInfo.fetch().then(function (state) {\n              if (!state.isConnected) {\n                return new Response(StatusCodes.NO_INTERNET, null);\n              }\n            }));\n\n          case 6:\n            networkStatus = _context2.sent;\n\n            if (!networkStatus) {\n              _context2.next = 9;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", networkStatus);\n\n          case 9:\n            URL = configData.SERVER_URL + \"user/getDetails/\" + userId;\n            return _context2.abrupt(\"return\", fetch(URL, {\n              method: 'GET',\n              headers: header\n            }).then(function (response) {\n              return response.json();\n            }).then(function (response) {\n              if (response.status >= StatusCodes.BAD_REQUEST) {\n                if (response.message && response.message.includes(\"UNAUTHORIZED\")) {\n                  dispatch(userActions.cleanUserDataStateAndDB());\n                }\n\n                return new Response(response.status, null);\n              } else if (response.userDetails !== null && response.userDetails.userFirstName !== null) {\n                dispatch({\n                  type: UPDATE_USER_DETAILS,\n                  userDetails: response.userDetails\n                });\n              }\n\n              return new Response(StatusCodes.OK, response.userDetails);\n            }).catch(function (err) {\n              return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\n            }));\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var updateUserDetails = function updateUserDetails(firstName, lastName, height, weight) {\n  return function _callee3(dispatch) {\n    var header, userId, networkStatus, userDetails, URL;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(dispatch(getUserAuthenticationToken()));\n\n          case 2:\n            header = _context3.sent;\n            userId = header.USER_ID;\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(NetInfo.fetch().then(function (state) {\n              if (!state.isConnected) {\n                return new Response(StatusCodes.NO_INTERNET, null);\n              }\n            }));\n\n          case 6:\n            networkStatus = _context3.sent;\n\n            if (!networkStatus) {\n              _context3.next = 9;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", networkStatus);\n\n          case 9:\n            userDetails = {\n              userFirstName: firstName,\n              userLastName: lastName,\n              userHeight: height,\n              userWeight: weight\n            };\n            URL = configData.SERVER_URL + \"user/updateDetails/\" + userId;\n            return _context3.abrupt(\"return\", fetch(URL, {\n              method: 'PUT',\n              headers: header,\n              body: JSON.stringify({\n                userDetails: userDetails\n              })\n            }).then(function (response) {\n              return response.json();\n            }).then(function (response) {\n              if (response.status >= StatusCodes.BAD_REQUEST) {\n                if (response.message && response.message.includes(\"UNAUTHORIZED\")) {\n                  dispatch(userActions.cleanUserDataStateAndDB());\n                }\n\n                return new Response(response.status, null);\n              } else if (response === true) {\n                dispatch({\n                  type: UPDATE_USER_DETAILS,\n                  userDetails: userDetails\n                });\n                return dispatch(updateUserDetailsInDB(firstName, lastName, height, weight)).then(function (response) {\n                  if (response.status >= StatusCodes.BAD_REQUEST) {\n                    return new Response(response.status, null);\n                  } else {\n                    return new Response(StatusCodes.OK, response.data);\n                  }\n                });\n              } else {\n                return new Response(StatusCodes.OK, userDetails);\n              }\n            }).catch(function (err) {\n              return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\n            }));\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar fetchUserDetails = function fetchUserDetails() {\n  return function _callee4(dispatch) {\n    var userFirstName, userLastName, userHeight, userWeight, userDetails;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('USER_FIRST_NAME'));\n\n          case 3:\n            userFirstName = _context4.sent;\n            _context4.next = 6;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('USER_LAST_NAME'));\n\n          case 6:\n            userLastName = _context4.sent;\n            _context4.next = 9;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('USER_HEIGHT'));\n\n          case 9:\n            userHeight = _context4.sent;\n            _context4.next = 12;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('USER_WEIGHT'));\n\n          case 12:\n            userWeight = _context4.sent;\n            userDetails = new UserDetails(userFirstName, userLastName, userHeight, userWeight);\n            return _context4.abrupt(\"return\", new Response(StatusCodes.OK, userDetails));\n\n          case 17:\n            _context4.prev = 17;\n            _context4.t0 = _context4[\"catch\"](0);\n            return _context4.abrupt(\"return\", new Response(StatusCodes.INTERNAL_SERVER_ERROR, null));\n\n          case 20:\n            ;\n\n          case 21:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, [[0, 17]], Promise);\n  };\n};\n\nvar updateUserDetailsInDB = function updateUserDetailsInDB(userFirstName, userLastName, userHeight, userWeight) {\n  return function _callee5(dispatch) {\n    var userDetails;\n    return _regeneratorRuntime.async(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('USER_FIRST_NAME', userFirstName));\n\n          case 3:\n            _context5.next = 5;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('USER_LAST_NAME', userLastName));\n\n          case 5:\n            _context5.next = 7;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('USER_HEIGHT', userHeight.toString()));\n\n          case 7:\n            _context5.next = 9;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('USER_WEIGHT', userWeight.toString()));\n\n          case 9:\n            userDetails = new UserDetails(userFirstName, userLastName, userHeight, userWeight);\n            return _context5.abrupt(\"return\", new Response(StatusCodes.OK, userDetails));\n\n          case 13:\n            _context5.prev = 13;\n            _context5.t0 = _context5[\"catch\"](0);\n            return _context5.abrupt(\"return\", new Response(StatusCodes.INTERNAL_SERVER_ERROR, null));\n\n          case 16:\n            ;\n\n          case 17:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, [[0, 13]], Promise);\n  };\n};\n\nexport var cleanUserDataStateAndDB = function cleanUserDataStateAndDB(navigation, dispatch) {\n  return function _callee6(dispatch) {\n    return _regeneratorRuntime.async(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: 'CLEAN_EVENT_STATE'\n            }));\n\n          case 2:\n            _context6.next = 4;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: 'CLEAN_RUN_STATE'\n            }));\n\n          case 4:\n            _context6.next = 6;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: 'CLEAN_USER_STATE'\n            }));\n\n          case 6:\n            _context6.next = 8;\n            return _regeneratorRuntime.awrap(dispatch({\n              type: 'CLEAN_AUTH_STATE'\n            }));\n\n          case 8:\n            _context6.next = 10;\n            return _regeneratorRuntime.awrap(dispatch(cleanUpUserData()));\n\n          case 10:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 11:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var cleanUpUserData = function cleanUpUserData() {\n  return function _callee7(dispatch) {\n    return _regeneratorRuntime.async(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _context7.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem('USER_ID'));\n\n          case 3:\n            _context7.next = 5;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem('USER_SECRET_KEY'));\n\n          case 5:\n            _context7.next = 7;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem('USER_FIRST_NAME'));\n\n          case 7:\n            _context7.next = 9;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem('USER_LAST_NAME'));\n\n          case 9:\n            _context7.next = 11;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem('USER_HEIGHT'));\n\n          case 11:\n            _context7.next = 13;\n            return _regeneratorRuntime.awrap(AsyncStorage.removeItem('USER_WEIGHT'));\n\n          case 13:\n            _context7.next = 15;\n            return _regeneratorRuntime.awrap(cleanUpAllData());\n\n          case 15:\n            new Response(StatusCodes.OK, true);\n            _context7.next = 21;\n            break;\n\n          case 18:\n            _context7.prev = 18;\n            _context7.t0 = _context7[\"catch\"](0);\n            new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\n\n          case 21:\n            ;\n\n          case 22:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, [[0, 18]], Promise);\n  };\n};","map":{"version":3,"sources":["F:/ReactNative/onehealthclient/onehealthclient/store/user-actions.js"],"names":["NetInfo","configData","StatusCodes","getUserAuthenticationToken","UserDetails","Response","cleanUpAllData","UPDATE_USER_DETAILS","CLEAN_USER_STATE","loadUserDetails","dispatch","fetchUserDetails","then","response","status","BAD_REQUEST","data","userFirstName","type","userDetails","OK","loadUserDetailsFromServer","updateUserDetailsInDB","userLastName","userHeight","userWeight","catch","err","INTERNAL_SERVER_ERROR","header","userId","USER_ID","fetch","state","isConnected","NO_INTERNET","networkStatus","URL","SERVER_URL","method","headers","json","message","includes","userActions","cleanUserDataStateAndDB","updateUserDetails","firstName","lastName","height","weight","body","JSON","stringify","AsyncStorage","getItem","setItem","toString","navigation","cleanUpUserData","removeItem"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,iCAApB;;AAEA,OAAOC,UAAP;AACA,OAAOC,WAAP;AACA,SAAQC,0BAAR;AACA,OAAOC,WAAP;AACA,OAAOC,QAAP;AACA,SAAQC,cAAR;AAEA,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAGP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEEA,QAAQ,CAACC,gBAAgB,EAAjB,CAAR,CAA6BC,IAA7B,CAAkC,UAACC,QAAD,EAAc;AACnD,kBAAIA,QAAQ,CAACC,MAAT,IAAmBZ,WAAW,CAACa,WAAnC,EAAgD;AAC9C,uBAAO,IAAIV,QAAJ,CAAaQ,QAAQ,CAACC,MAAtB,EAA8B,IAA9B,CAAP;AACD,eAFD,MAEO,IAAID,QAAQ,CAACG,IAAT,CAAcC,aAAd,KAAgC,IAApC,EAA0C;AAE/CP,gBAAAA,QAAQ,CAAC;AACPQ,kBAAAA,IAAI,EAAEX,mBADC;AAEPY,kBAAAA,WAAW,EAAEN,QAAQ,CAACG;AAFf,iBAAD,CAAR;AAIA,uBAAO,IAAIX,QAAJ,CAAaH,WAAW,CAACkB,EAAzB,EAA6BP,QAAQ,CAACG,IAAtC,CAAP;AACD,eAPM,MAOA;AAEL,uBAAON,QAAQ,CAACW,yBAAyB,EAA1B,CAAR,CAAsCT,IAAtC,CAA2C,UAACC,QAAD,EAAc;AAC9D,sBAAIA,QAAQ,CAACC,MAAT,IAAmBZ,WAAW,CAACa,WAAnC,EAAgD;AAC9C,2BAAO,IAAIV,QAAJ,CAAaQ,QAAQ,CAACC,MAAtB,EAA8B,IAA9B,CAAP;AACD,mBAFD,MAEO,IAAID,QAAQ,CAACG,IAAT,CAAcC,aAAd,KAAgC,IAApC,EAA0C;AAE/CP,oBAAAA,QAAQ,CAACY,qBAAqB,CAACT,QAAQ,CAACG,IAAT,CAAcC,aAAf,EAA8BJ,QAAQ,CAACG,IAAT,CAAcO,YAA5C,EAA0DV,QAAQ,CAACG,IAAT,CAAcQ,UAAxE,EAAoFX,QAAQ,CAACG,IAAT,CAAcS,UAAlG,CAAtB,CAAR;AACD;;AACD,yBAAO,IAAIpB,QAAJ,CAAaH,WAAW,CAACkB,EAAzB,EAA6BP,QAAQ,CAACG,IAAtC,CAAP;AACD,iBARM,CAAP;AASD;AACF,aAtBI,EAuBJU,KAvBI,CAuBE,UAAAC,GAAG,EAAI;AACZ,qBAAO,IAAItB,QAAJ,CAAaH,WAAW,CAAC0B,qBAAzB,EAAgD,IAAhD,CAAP;AACD,aAzBI,CAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA6BD,CA9BM;AAiCP,OAAO,IAAMP,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAM;AAC7C,SAAO,kBAAMX,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACcA,QAAQ,CAACP,0BAA0B,EAA3B,CADtB;;AAAA;AACD0B,YAAAA,MADC;AAEDC,YAAAA,MAFC,GAEQD,MAAM,CAACE,OAFf;AAAA;AAAA,6CAIqB/B,OAAO,CAACgC,KAAR,GAAgBpB,IAAhB,CAAqB,UAAAqB,KAAK,EAAI;AACtD,kBAAI,CAACA,KAAK,CAACC,WAAX,EAAwB;AACtB,uBAAO,IAAI7B,QAAJ,CAAaH,WAAW,CAACiC,WAAzB,EAAsC,IAAtC,CAAP;AACD;AACF,aAJyB,CAJrB;;AAAA;AAIDC,YAAAA,aAJC;;AAAA,iBASDA,aATC;AAAA;AAAA;AAAA;;AAAA,8CAUIA,aAVJ;;AAAA;AAaDC,YAAAA,GAbC,GAaKpC,UAAU,CAACqC,UAAX,GAAwB,kBAAxB,GAA6CR,MAblD;AAAA,8CAcEE,KAAK,CAACK,GAAD,EAAM;AACdE,cAAAA,MAAM,EAAE,KADM;AAEdC,cAAAA,OAAO,EAAEX;AAFK,aAAN,CAAL,CAGFjB,IAHE,CAGG,UAAAC,QAAQ;AAAA,qBAAIA,QAAQ,CAAC4B,IAAT,EAAJ;AAAA,aAHX,EAIJ7B,IAJI,CAIC,UAACC,QAAD,EAAc;AAClB,kBAAIA,QAAQ,CAACC,MAAT,IAAmBZ,WAAW,CAACa,WAAnC,EAAgD;AAChD,oBAAIF,QAAQ,CAAC6B,OAAT,IAAoB7B,QAAQ,CAAC6B,OAAT,CAAiBC,QAAjB,CAA0B,cAA1B,CAAxB,EAAmE;AACjEjC,kBAAAA,QAAQ,CAACkC,WAAW,CAACC,uBAAZ,EAAD,CAAR;AACD;;AACC,uBAAO,IAAIxC,QAAJ,CAAaQ,QAAQ,CAACC,MAAtB,EAA8B,IAA9B,CAAP;AACD,eALD,MAKO,IAAID,QAAQ,CAACM,WAAT,KAAyB,IAAzB,IAAiCN,QAAQ,CAACM,WAAT,CAAqBF,aAArB,KAAuC,IAA5E,EAAkF;AAEvFP,gBAAAA,QAAQ,CAAC;AACPQ,kBAAAA,IAAI,EAAEX,mBADC;AAEPY,kBAAAA,WAAW,EAAEN,QAAQ,CAACM;AAFf,iBAAD,CAAR;AAID;;AACD,qBAAO,IAAId,QAAJ,CAAaH,WAAW,CAACkB,EAAzB,EAA6BP,QAAQ,CAACM,WAAtC,CAAP;AACD,aAlBI,EAkBFO,KAlBE,CAkBI,UAAAC,GAAG,EAAI;AACd,qBAAO,IAAItB,QAAJ,CAAaH,WAAW,CAAC0B,qBAAzB,EAAgD,IAAhD,CAAP;AACD,aApBI,CAdF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAoCD,CArCM;AAyCP,OAAO,IAAMkB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,SAAD,EAAYC,QAAZ,EAAsBC,MAAtB,EAA8BC,MAA9B,EAAyC;AACxE,SAAO,kBAAMxC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACcA,QAAQ,CAACP,0BAA0B,EAA3B,CADtB;;AAAA;AACD0B,YAAAA,MADC;AAEDC,YAAAA,MAFC,GAEQD,MAAM,CAACE,OAFf;AAAA;AAAA,6CAIqB/B,OAAO,CAACgC,KAAR,GAAgBpB,IAAhB,CAAqB,UAAAqB,KAAK,EAAI;AACtD,kBAAI,CAACA,KAAK,CAACC,WAAX,EAAwB;AACtB,uBAAO,IAAI7B,QAAJ,CAAaH,WAAW,CAACiC,WAAzB,EAAsC,IAAtC,CAAP;AACD;AACF,aAJyB,CAJrB;;AAAA;AAIDC,YAAAA,aAJC;;AAAA,iBASDA,aATC;AAAA;AAAA;AAAA;;AAAA,8CAUIA,aAVJ;;AAAA;AAaDjB,YAAAA,WAbC,GAaa;AAChBF,cAAAA,aAAa,EAAE8B,SADC;AAEhBxB,cAAAA,YAAY,EAAEyB,QAFE;AAGhBxB,cAAAA,UAAU,EAAEyB,MAHI;AAIhBxB,cAAAA,UAAU,EAAEyB;AAJI,aAbb;AAoBDb,YAAAA,GApBC,GAoBKpC,UAAU,CAACqC,UAAX,GAAwB,qBAAxB,GAAgDR,MApBrD;AAAA,8CAqBEE,KAAK,CAACK,GAAD,EAAM;AACdE,cAAAA,MAAM,EAAE,KADM;AAEdC,cAAAA,OAAO,EAAEX,MAFK;AAGdsB,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBlC,gBAAAA,WAAW,EAAEA;AADM,eAAf;AAHQ,aAAN,CAAL,CAMFP,IANE,CAMG,UAAAC,QAAQ;AAAA,qBAAIA,QAAQ,CAAC4B,IAAT,EAAJ;AAAA,aANX,EAOJ7B,IAPI,CAOC,UAACC,QAAD,EAAc;AAClB,kBAAIA,QAAQ,CAACC,MAAT,IAAmBZ,WAAW,CAACa,WAAnC,EAAgD;AAChD,oBAAIF,QAAQ,CAAC6B,OAAT,IAAoB7B,QAAQ,CAAC6B,OAAT,CAAiBC,QAAjB,CAA0B,cAA1B,CAAxB,EAAmE;AACjEjC,kBAAAA,QAAQ,CAACkC,WAAW,CAACC,uBAAZ,EAAD,CAAR;AACD;;AACC,uBAAO,IAAIxC,QAAJ,CAAaQ,QAAQ,CAACC,MAAtB,EAA8B,IAA9B,CAAP;AACD,eALD,MAKO,IAAID,QAAQ,KAAK,IAAjB,EAAuB;AAE5BH,gBAAAA,QAAQ,CAAC;AACPQ,kBAAAA,IAAI,EAAEX,mBADC;AAEPY,kBAAAA,WAAW,EAAEA;AAFN,iBAAD,CAAR;AAMA,uBAAOT,QAAQ,CAACY,qBAAqB,CAACyB,SAAD,EAAYC,QAAZ,EAAsBC,MAAtB,EAA8BC,MAA9B,CAAtB,CAAR,CAAqEtC,IAArE,CAA0E,UAACC,QAAD,EAAc;AAC7F,sBAAIA,QAAQ,CAACC,MAAT,IAAmBZ,WAAW,CAACa,WAAnC,EAAgD;AAC9C,2BAAO,IAAIV,QAAJ,CAAaQ,QAAQ,CAACC,MAAtB,EAA8B,IAA9B,CAAP;AACD,mBAFD,MAEO;AACL,2BAAO,IAAIT,QAAJ,CAAaH,WAAW,CAACkB,EAAzB,EAA6BP,QAAQ,CAACG,IAAtC,CAAP;AACD;AACF,iBANM,CAAP;AAOD,eAfM,MAeA;AACL,uBAAO,IAAIX,QAAJ,CAAaH,WAAW,CAACkB,EAAzB,EAA6BD,WAA7B,CAAP;AACD;AACF,aA/BI,EA+BFO,KA/BE,CA+BI,UAAAC,GAAG,EAAI;AACd,qBAAO,IAAItB,QAAJ,CAAaH,WAAW,CAAC0B,qBAAzB,EAAgD,IAAhD,CAAP;AACD,aAjCI,CArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAwDD,CAzDM;;AA4DP,IAAMjB,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAC7B,SAAO,kBAAMD,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEuB4C,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAFvB;;AAAA;AAECtC,YAAAA,aAFD;AAAA;AAAA,6CAGsBqC,YAAY,CAACC,OAAb,CAAqB,gBAArB,CAHtB;;AAAA;AAGChC,YAAAA,YAHD;AAAA;AAAA,6CAIoB+B,YAAY,CAACC,OAAb,CAAqB,aAArB,CAJpB;;AAAA;AAIC/B,YAAAA,UAJD;AAAA;AAAA,6CAKoB8B,YAAY,CAACC,OAAb,CAAqB,aAArB,CALpB;;AAAA;AAKC9B,YAAAA,UALD;AAMCN,YAAAA,WAND,GAMe,IAAIf,WAAJ,CAAgBa,aAAhB,EAA+BM,YAA/B,EAA6CC,UAA7C,EAAyDC,UAAzD,CANf;AAAA,8CAOI,IAAIpB,QAAJ,CAAaH,WAAW,CAACkB,EAAzB,EAA6BD,WAA7B,CAPJ;;AAAA;AAAA;AAAA;AAAA,8CASI,IAAId,QAAJ,CAAaH,WAAW,CAAC0B,qBAAzB,EAAgD,IAAhD,CATJ;;AAAA;AAUJ;;AAVI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAYD,CAbD;;AAgBA,IAAMN,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACL,aAAD,EAAgBM,YAAhB,EAA8BC,UAA9B,EAA0CC,UAA1C,EAAyD;AACrF,SAAO,kBAAMf,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEG4C,YAAY,CAACE,OAAb,CAAqB,iBAArB,EAAwCvC,aAAxC,CAFH;;AAAA;AAAA;AAAA,6CAGGqC,YAAY,CAACE,OAAb,CAAqB,gBAArB,EAAuCjC,YAAvC,CAHH;;AAAA;AAAA;AAAA,6CAIG+B,YAAY,CAACE,OAAb,CAAqB,aAArB,EAAoChC,UAAU,CAACiC,QAAX,EAApC,CAJH;;AAAA;AAAA;AAAA,6CAKGH,YAAY,CAACE,OAAb,CAAqB,aAArB,EAAoC/B,UAAU,CAACgC,QAAX,EAApC,CALH;;AAAA;AAMCtC,YAAAA,WAND,GAMe,IAAIf,WAAJ,CAAgBa,aAAhB,EAA+BM,YAA/B,EAA6CC,UAA7C,EAAyDC,UAAzD,CANf;AAAA,8CAOI,IAAIpB,QAAJ,CAAaH,WAAW,CAACkB,EAAzB,EAA6BD,WAA7B,CAPJ;;AAAA;AAAA;AAAA;AAAA,8CASI,IAAId,QAAJ,CAAaH,WAAW,CAAC0B,qBAAzB,EAAgD,IAAhD,CATJ;;AAAA;AAUJ;;AAVI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAYD,CAbD;;AAgBA,OAAO,IAAMiB,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACa,UAAD,EAAahD,QAAb,EAA0B;AAC/D,SAAO,kBAAMA,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACCA,QAAQ,CAAC;AAACQ,cAAAA,IAAI,EAAE;AAAP,aAAD,CADT;;AAAA;AAAA;AAAA,6CAECR,QAAQ,CAAC;AAACQ,cAAAA,IAAI,EAAE;AAAP,aAAD,CAFT;;AAAA;AAAA;AAAA,6CAGCR,QAAQ,CAAC;AAACQ,cAAAA,IAAI,EAAE;AAAP,aAAD,CAHT;;AAAA;AAAA;AAAA,6CAICR,QAAQ,CAAC;AAACQ,cAAAA,IAAI,EAAE;AAAP,aAAD,CAJT;;AAAA;AAAA;AAAA,6CAKQR,QAAQ,CAACiD,eAAe,EAAhB,CALhB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAOD,CARM;AAWP,OAAO,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,SAAO,kBAAMjD,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEG4C,YAAY,CAACM,UAAb,CAAwB,SAAxB,CAFH;;AAAA;AAAA;AAAA,6CAGGN,YAAY,CAACM,UAAb,CAAwB,iBAAxB,CAHH;;AAAA;AAAA;AAAA,6CAIGN,YAAY,CAACM,UAAb,CAAwB,iBAAxB,CAJH;;AAAA;AAAA;AAAA,6CAKGN,YAAY,CAACM,UAAb,CAAwB,gBAAxB,CALH;;AAAA;AAAA;AAAA,6CAMGN,YAAY,CAACM,UAAb,CAAwB,aAAxB,CANH;;AAAA;AAAA;AAAA,6CAOGN,YAAY,CAACM,UAAb,CAAwB,aAAxB,CAPH;;AAAA;AAAA;AAAA,6CAQGtD,cAAc,EARjB;;AAAA;AASH,gBAAID,QAAJ,CAAaH,WAAW,CAACkB,EAAzB,EAA6B,IAA7B;AATG;AAAA;;AAAA;AAAA;AAAA;AAWH,gBAAIf,QAAJ,CAAaH,WAAW,CAAC0B,qBAAzB,EAAgD,IAAhD;;AAXG;AAYJ;;AAZI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAcD,CAfM","sourcesContent":["import NetInfo from '@react-native-community/netinfo';\r\nimport {AsyncStorage} from 'react-native';\r\nimport configData from \"../config/config.json\";\r\nimport StatusCodes from \"../utils/StatusCodes.json\";\r\nimport {getUserAuthenticationToken} from '../utils/AuthenticationUtils';\r\nimport UserDetails from '../models/userDetails';\r\nimport Response from '../models/response';\r\nimport {cleanUpAllData} from '../utils/DBUtils';\r\n\r\nexport const UPDATE_USER_DETAILS = 'UPDATE_USER_DETAILS';\r\nexport const CLEAN_USER_STATE = 'CLEAN_USER_STATE';\r\n\r\n//Method to Load User Details first from local DB, and then from server in case needed and hydrate local DB\r\nexport const loadUserDetails = () => {\r\n  return async dispatch => {\r\n    //Sync Fetch User Details from Local DB\r\n    return dispatch(fetchUserDetails()).then((response) => {\r\n        if (response.status >= StatusCodes.BAD_REQUEST) {\r\n          return new Response(response.status, null);\r\n        } else if (response.data.userFirstName !== null) {\r\n          //Async Dispatch User Details Update State\r\n          dispatch({\r\n            type: UPDATE_USER_DETAILS,\r\n            userDetails: response.data\r\n          });\r\n          return new Response(StatusCodes.OK, response.data);\r\n        } else {\r\n          //Sync Dispatch Load User Details from Server Action\r\n          return dispatch(loadUserDetailsFromServer()).then((response) => {\r\n            if (response.status >= StatusCodes.BAD_REQUEST) {\r\n              return new Response(response.status, null);\r\n            } else if (response.data.userFirstName !== null) {\r\n              //Hydrate Local DB Async\r\n              dispatch(updateUserDetailsInDB(response.data.userFirstName, response.data.userLastName, response.data.userHeight, response.data.userWeight));\r\n            }\r\n            return new Response(StatusCodes.OK, response.data);\r\n          });\r\n        }\r\n      })\r\n      .catch(err => {\r\n        return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n      });\r\n  }\r\n};\r\n\r\n//Load User Details from Local DB or from server\r\nexport const loadUserDetailsFromServer = () => {\r\n  return async dispatch => {\r\n    var header = await dispatch(getUserAuthenticationToken());\r\n    var userId = header.USER_ID;\r\n\r\n    var networkStatus = await NetInfo.fetch().then(state => {\r\n      if (!state.isConnected) {\r\n        return new Response(StatusCodes.NO_INTERNET, null);\r\n      }\r\n    });\r\n    if (networkStatus) {\r\n      return networkStatus;\r\n    }\r\n\r\n    var URL = configData.SERVER_URL + \"user/getDetails/\" + userId;\r\n    return fetch(URL, {\r\n        method: 'GET',\r\n        headers: header\r\n      }).then(response => response.json())\r\n      .then((response) => {\r\n        if (response.status >= StatusCodes.BAD_REQUEST) {\r\n        if (response.message && response.message.includes(\"UNAUTHORIZED\")) {\r\n          dispatch(userActions.cleanUserDataStateAndDB());\r\n        }\r\n          return new Response(response.status, null);\r\n        } else if (response.userDetails !== null && response.userDetails.userFirstName !== null) {\r\n          //Async Dispatch User Details Update State\r\n          dispatch({\r\n            type: UPDATE_USER_DETAILS,\r\n            userDetails: response.userDetails\r\n          });\r\n        }\r\n        return new Response(StatusCodes.OK, response.userDetails);\r\n      }).catch(err => {\r\n        return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n      });\r\n  }\r\n};\r\n\r\n//TODO Names should be encrypted\r\n//Method to Update User Details on Server and local Async DB\r\nexport const updateUserDetails = (firstName, lastName, height, weight) => {\r\n  return async dispatch => {\r\n    var header = await dispatch(getUserAuthenticationToken());\r\n    var userId = header.USER_ID;\r\n\r\n    var networkStatus = await NetInfo.fetch().then(state => {\r\n      if (!state.isConnected) {\r\n        return new Response(StatusCodes.NO_INTERNET, null);\r\n      }\r\n    });\r\n    if (networkStatus) {\r\n      return networkStatus;\r\n    }\r\n\r\n    var userDetails = {\r\n      userFirstName: firstName,\r\n      userLastName: lastName,\r\n      userHeight: height,\r\n      userWeight: weight\r\n    }\r\n\r\n    var URL = configData.SERVER_URL + \"user/updateDetails/\" + userId;\r\n    return fetch(URL, {\r\n        method: 'PUT',\r\n        headers: header,\r\n        body: JSON.stringify({\r\n          userDetails: userDetails\r\n        })\r\n      }).then(response => response.json())\r\n      .then((response) => {\r\n        if (response.status >= StatusCodes.BAD_REQUEST) {\r\n        if (response.message && response.message.includes(\"UNAUTHORIZED\")) {\r\n          dispatch(userActions.cleanUserDataStateAndDB());\r\n        }\r\n          return new Response(response.status, null);\r\n        } else if (response === true) {\r\n          //Async Update State for User Details\r\n          dispatch({\r\n            type: UPDATE_USER_DETAILS,\r\n            userDetails: userDetails\r\n          });\r\n\r\n          //Sync Update User Details in Async DB\r\n          return dispatch(updateUserDetailsInDB(firstName, lastName, height, weight)).then((response) => {\r\n            if (response.status >= StatusCodes.BAD_REQUEST) {\r\n              return new Response(response.status, null);\r\n            } else {\r\n              return new Response(StatusCodes.OK, response.data);\r\n            }\r\n          });\r\n        } else {\r\n          return new Response(StatusCodes.OK, userDetails);\r\n        }\r\n      }).catch(err => {\r\n        return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n      });\r\n  }\r\n};\r\n\r\n//Private Method to load User Details from Async Storage\r\nconst fetchUserDetails = () => {\r\n  return async dispatch => {\r\n    try {\r\n      var userFirstName = await AsyncStorage.getItem('USER_FIRST_NAME');\r\n      var userLastName = await AsyncStorage.getItem('USER_LAST_NAME');\r\n      var userHeight = await AsyncStorage.getItem('USER_HEIGHT');\r\n      var userWeight = await AsyncStorage.getItem('USER_WEIGHT');\r\n      var userDetails = new UserDetails(userFirstName, userLastName, userHeight, userWeight);\r\n      return new Response(StatusCodes.OK, userDetails);\r\n    } catch (err) {\r\n      return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n    };\r\n  }\r\n};\r\n\r\n//Private method to update user details in Async DB\r\nconst updateUserDetailsInDB = (userFirstName, userLastName, userHeight, userWeight) => {\r\n  return async dispatch => {\r\n    try {\r\n      await AsyncStorage.setItem('USER_FIRST_NAME', userFirstName);\r\n      await AsyncStorage.setItem('USER_LAST_NAME', userLastName);\r\n      await AsyncStorage.setItem('USER_HEIGHT', userHeight.toString());\r\n      await AsyncStorage.setItem('USER_WEIGHT', userWeight.toString());\r\n      var userDetails = new UserDetails(userFirstName, userLastName, userHeight, userWeight);\r\n      return new Response(StatusCodes.OK, userDetails);\r\n    } catch (err) {\r\n      return new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n    };\r\n  }\r\n};\r\n\r\n//Utility Method to cleanup user state and local DB\r\nexport const cleanUserDataStateAndDB = (navigation, dispatch) => {\r\n  return async dispatch => {\r\n    await dispatch({type: 'CLEAN_EVENT_STATE'});\r\n    await dispatch({type: 'CLEAN_RUN_STATE'});\r\n    await dispatch({type: 'CLEAN_USER_STATE'});\r\n    await dispatch({type: 'CLEAN_AUTH_STATE'});\r\n    return await dispatch(cleanUpUserData());\r\n  };\r\n};\r\n\r\n//Method to clean up All User Data from Async Store and Local DB\r\nexport const cleanUpUserData = () => {\r\n  return async dispatch => {\r\n    try {\r\n      await AsyncStorage.removeItem('USER_ID');\r\n      await AsyncStorage.removeItem('USER_SECRET_KEY');\r\n      await AsyncStorage.removeItem('USER_FIRST_NAME');\r\n      await AsyncStorage.removeItem('USER_LAST_NAME');\r\n      await AsyncStorage.removeItem('USER_HEIGHT');\r\n      await AsyncStorage.removeItem('USER_WEIGHT');\r\n      await cleanUpAllData();\r\n      new Response(StatusCodes.OK, true);\r\n    } catch (err) {\r\n      new Response(StatusCodes.INTERNAL_SERVER_ERROR, null);\r\n    };\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}