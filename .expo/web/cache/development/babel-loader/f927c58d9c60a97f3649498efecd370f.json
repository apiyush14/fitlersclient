{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"F:\\\\ReactNative\\\\onehealthclient\\\\onehealthclient\\\\screens\\\\EventsListSummaryScreen.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport EventItemsList from \"../components/EventItemsList\";\nimport EventHistoryList from \"../components/EventHistoryList\";\nimport EventView from \"../components/EventView\";\nimport * as runActions from \"../store/run-actions\";\nimport * as eventActions from \"../store/event-actions\";\nimport { scale, moderateScale, verticalScale } from \"../utils/Utils\";\nimport StatusCodes from \"../utils/StatusCodes.json\";\n\nvar EventsListSummaryScreen = function EventsListSummaryScreen(props) {\n  var dispatch = useDispatch();\n  var eventDetails = useSelector(function (state) {\n    return state.events.eventDetails;\n  });\n  var eventRegistrationDetails = useSelector(function (state) {\n    return state.events.eventRegistrationDetails;\n  }).filter(function (event) {\n    var currentTime = new Date().getTime();\n    var eventEndDateTime = new Date(event.eventEndDate);\n    return currentTime <= eventEndDateTime.getTime() && event.runId === 0;\n  });\n  var runsHistoryDetails = useSelector(function (state) {\n    return state.runs.runs;\n  });\n  var eventRunsHistoryDetails = useSelector(function (state) {\n    return state.runs.runs;\n  }).filter(function (run) {\n    return run.eventId > 0;\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      upcomingEventsSelected = _useState2[0],\n      setUpcomingEventsSelected = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      registeredEventsSelected = _useState4[0],\n      setRegisteredEventsSelected = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      completedEventsSelected = _useState6[0],\n      setCompletedEventsSelected = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      modalVisible = _useState8[0],\n      setModalVisible = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      modalEventDetails = _useState10[0],\n      setModalEventDetails = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isLoading = _useState12[0],\n      setIsLoading = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      refreshing = _useState14[0],\n      setRefreshing = _useState14[1];\n\n  useEffect(function () {\n    setUpcomingEventsSelected(true);\n  }, []);\n\n  var onToggleSelection = function onToggleSelection(selectedOption) {\n    if (selectedOption === 'upcomingEvents') {\n      setRegisteredEventsSelected(false);\n      setCompletedEventsSelected(false);\n      setUpcomingEventsSelected(true);\n    } else if (selectedOption === 'registeredEvents') {\n      setUpcomingEventsSelected(false);\n      setCompletedEventsSelected(false);\n      setRegisteredEventsSelected(true);\n    } else if (selectedOption === 'completedEvents') {\n      setUpcomingEventsSelected(false);\n      setRegisteredEventsSelected(false);\n      setCompletedEventsSelected(true);\n    }\n  };\n\n  var onClickEventItem = function onClickEventItem(eventItem) {\n    setModalEventDetails(eventItem);\n    setModalVisible(true);\n  };\n\n  var onCloseEventItem = function onCloseEventItem(eventItem) {\n    setModalVisible(false);\n  };\n\n  var onRegisterEventItem = function onRegisterEventItem(eventItem) {\n    dispatch(eventActions.registerUserForEvent(modalEventDetails)).then(function (response) {\n      if (response.status === StatusCodes.NO_INTERNET) {\n        Alert.alert(\"Internet Issue\", \"Active Internet Connection Required!!!\", [{\n          text: 'OK',\n          onPress: function onPress() {\n            setModalVisible(false);\n          }\n        }], {\n          cancelable: false\n        });\n      } else if (response.status != StatusCodes.OK) {\n        Alert.alert(\"Registration Failed\", \"Registration for the event failed, please try again later!!!\", [{\n          text: 'OK',\n          onPress: function onPress() {\n            setModalVisible(false);\n          }\n        }], {\n          cancelable: false\n        });\n      } else {\n        Alert.alert(\"Registration Successful\", \"You have been registered successfully, see you on Run Day!!!\", [{\n          text: 'OK',\n          onPress: function onPress() {\n            setModalVisible(false);\n          }\n        }], {\n          cancelable: false\n        });\n      }\n    });\n  };\n\n  var onRefresh = function onRefresh() {\n    setRefreshing(true);\n    dispatch(eventActions.loadEventResultDetailsFromServer()).then(function () {\n      setRefreshing(false);\n    }).catch(function (err) {\n      setRefreshing(false);\n    });\n  };\n\n  var loadMoreRunsHistoryFromServer = function loadMoreRunsHistoryFromServer() {\n    setIsLoading(true);\n    var pageNumber = Math.floor(runsHistoryDetails.length / 3);\n    dispatch(runActions.loadRunsFromServer(pageNumber)).then(function () {\n      setIsLoading(false);\n    }).catch(function (err) {\n      setIsLoading(false);\n    });\n  };\n\n  var loadMoreEventsFromServer = function loadMoreEventsFromServer() {\n    setIsLoading(true);\n    var pageNumber = Math.floor(eventDetails.length / 3);\n    dispatch(eventActions.loadEventsFromServer(pageNumber)).then(function () {\n      setIsLoading(false);\n    }).catch(function (err) {\n      setIsLoading(false);\n    });\n  };\n\n  var onSelectRunHistoryItem = function onSelectRunHistoryItem(itemdata) {\n    props.navigation.navigate('RunDetailsScreen', {\n      runId: itemdata.item.runId,\n      eventId: itemdata.item.eventId,\n      runTrackSnapUrl: itemdata.item.runTrackSnapUrl,\n      runDate: itemdata.item.runDate,\n      runDay: itemdata.item.runDay,\n      runTotalTime: itemdata.item.runTotalTime,\n      runDistance: itemdata.item.runDistance,\n      runPace: itemdata.item.runPace,\n      runCaloriesBurnt: itemdata.item.runCaloriesBurnt,\n      runPath: itemdata.item.runPath,\n      sourceScreen: 'RunHistoryScreen'\n    });\n  };\n\n  var renderEventSummaryFooter = function renderEventSummaryFooter() {\n    return React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, isLoading ? React.createElement(ActivityIndicator, {\n      size: \"large\",\n      color: \"green\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 6\n      }\n    }) : React.createElement(View, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 6\n      }\n    }));\n  };\n\n  return React.createElement(View, {\n    style: styles.eventsListSummaryScreenContainerStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 3\n    }\n  }, React.createElement(Modal, {\n    animationType: \"slide\",\n    transparent: true,\n    visible: modalVisible,\n    onRequestClose: function onRequestClose() {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 4\n    }\n  }, React.createElement(EventView, {\n    onRegisterEventItem: onRegisterEventItem,\n    onCloseEventItem: onCloseEventItem,\n    eventDetails: modalEventDetails,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 4\n    }\n  })), React.createElement(View, {\n    style: styles.eventsListSummaryScreenHeaderOptionsStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 4\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: styles.touchableOptionStyle,\n    onPress: function onPress() {\n      return onToggleSelection('upcomingEvents');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.textHeaderStyle), {}, {\n      color: upcomingEventsSelected ? 'black' : 'lightgrey'\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 6\n    }\n  }, \"Upcoming\")), React.createElement(TouchableOpacity, {\n    style: styles.touchableOptionStyle,\n    onPress: function onPress() {\n      return onToggleSelection('registeredEvents');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.textHeaderStyle), {}, {\n      color: registeredEventsSelected ? 'black' : 'lightgrey'\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 6\n    }\n  }, \"Registered\")), React.createElement(TouchableOpacity, {\n    style: styles.touchableOptionStyle,\n    onPress: function onPress() {\n      return onToggleSelection('completedEvents');\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.textHeaderStyle), {}, {\n      color: completedEventsSelected ? 'black' : 'lightgrey'\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 6\n    }\n  }, \"Completed\"))), completedEventsSelected && eventRunsHistoryDetails.length > 0 ? React.createElement(View, {\n    style: styles.headerTextViewStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 4\n    }\n  }, React.createElement(Text, {\n    style: styles.textHeaderStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 6\n    }\n  }, \"Pull to Refresh Rank\")) : React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 5\n    }\n  }), upcomingEventsSelected === true ? eventDetails.length === 0 ? React.createElement(View, {\n    style: styles.eventItemsListStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.defaultTextStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 6\n    }\n  }, \"No Upcoming Events\")) : React.createElement(View, {\n    style: styles.eventItemsListStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 5\n    }\n  }, React.createElement(EventItemsList, {\n    onClickEventItem: onClickEventItem,\n    onEndReached: loadMoreEventsFromServer,\n    isLoading: isLoading,\n    listData: eventDetails,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 5\n    }\n  })) : registeredEventsSelected === true ? eventRegistrationDetails.length === 0 ? React.createElement(View, {\n    style: styles.eventItemsListStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.defaultTextStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 6\n    }\n  }, \"No Registered Events\")) : React.createElement(View, {\n    style: styles.eventItemsListStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }\n  }, React.createElement(EventItemsList, {\n    onClickEventItem: onClickEventItem,\n    onEndReached: loadMoreEventsFromServer,\n    isLoading: isLoading,\n    listData: eventRegistrationDetails,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }\n  })) : eventRunsHistoryDetails.length === 0 ? React.createElement(View, {\n    style: styles.eventItemsListStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.defaultTextStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 6\n    }\n  }, \"No Completed Events\")) : React.createElement(View, {\n    style: styles.eventItemsListStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 5\n    }\n  }, React.createElement(EventHistoryList, {\n    onSelectRunItem: onSelectRunHistoryItem,\n    onEndReached: loadMoreRunsHistoryFromServer,\n    isLoading: isLoading,\n    onRefresh: onRefresh,\n    refreshing: refreshing,\n    footer: renderEventSummaryFooter(),\n    listData: eventRunsHistoryDetails,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 5\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  eventsListSummaryScreenContainerStyle: {\n    flex: 1\n  },\n  eventsListSummaryScreenHeaderOptionsStyle: {\n    height: '20%',\n    backgroundColor: 'white',\n    flexDirection: 'row'\n  },\n  eventItemsListStyle: {\n    height: '80%',\n    backgroundColor: 'white'\n  },\n  touchableOptionStyle: {\n    width: '30%',\n    height: '20%',\n    top: '10%',\n    borderRightWidth: 1,\n    borderColor: 'lightgrey'\n  },\n  headerTextViewStyle: {\n    alignItems: 'center',\n    backgroundColor: 'white'\n  },\n  textHeaderStyle: {\n    fontSize: moderateScale(15, 0.5),\n    alignSelf: 'center'\n  },\n  defaultTextStyle: {\n    fontSize: moderateScale(15, 0.5),\n    alignSelf: 'center',\n    top: '50%',\n    color: 'grey'\n  }\n});\nexport default EventsListSummaryScreen;","map":{"version":3,"sources":["F:/ReactNative/onehealthclient/onehealthclient/screens/EventsListSummaryScreen.js"],"names":["React","useState","useEffect","useDispatch","useSelector","EventItemsList","EventHistoryList","EventView","runActions","eventActions","scale","moderateScale","verticalScale","StatusCodes","EventsListSummaryScreen","props","dispatch","eventDetails","state","events","eventRegistrationDetails","filter","event","currentTime","Date","getTime","eventEndDateTime","eventEndDate","runId","runsHistoryDetails","runs","eventRunsHistoryDetails","run","eventId","upcomingEventsSelected","setUpcomingEventsSelected","registeredEventsSelected","setRegisteredEventsSelected","completedEventsSelected","setCompletedEventsSelected","modalVisible","setModalVisible","modalEventDetails","setModalEventDetails","isLoading","setIsLoading","refreshing","setRefreshing","onToggleSelection","selectedOption","onClickEventItem","eventItem","onCloseEventItem","onRegisterEventItem","registerUserForEvent","then","response","status","NO_INTERNET","Alert","alert","text","onPress","cancelable","OK","onRefresh","loadEventResultDetailsFromServer","catch","err","loadMoreRunsHistoryFromServer","pageNumber","Math","floor","length","loadRunsFromServer","loadMoreEventsFromServer","loadEventsFromServer","onSelectRunHistoryItem","itemdata","navigation","navigate","item","runTrackSnapUrl","runDate","runDay","runTotalTime","runDistance","runPace","runCaloriesBurnt","runPath","sourceScreen","renderEventSummaryFooter","styles","eventsListSummaryScreenContainerStyle","eventsListSummaryScreenHeaderOptionsStyle","touchableOptionStyle","textHeaderStyle","color","headerTextViewStyle","eventItemsListStyle","defaultTextStyle","StyleSheet","create","flex","height","backgroundColor","flexDirection","width","top","borderRightWidth","borderColor","alignItems","fontSize","alignSelf"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, Text, StyleSheet, TouchableOpacity,Modal,ActivityIndicator, Alert} from 'react-native';\r\nimport {useDispatch,useSelector} from 'react-redux';\r\nimport EventItemsList from '../components/EventItemsList';\r\nimport EventHistoryList from '../components/EventHistoryList';\r\nimport EventView from '../components/EventView';\r\nimport * as runActions from '../store/run-actions';\r\nimport * as eventActions from '../store/event-actions';\r\nimport { scale, moderateScale, verticalScale} from '../utils/Utils';\r\nimport StatusCodes from \"../utils/StatusCodes.json\";\r\n\r\nconst EventsListSummaryScreen = props => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  // State Selectors\r\n  const eventDetails = useSelector(state => state.events.eventDetails);\r\n  const eventRegistrationDetails = useSelector(state => state.events.eventRegistrationDetails).filter((event) => {\r\n    let currentTime = new Date().getTime();\r\n    var eventEndDateTime = new Date(event.eventEndDate);\r\n    return currentTime <= eventEndDateTime.getTime() && event.runId === 0;\r\n  });\r\n  const runsHistoryDetails = useSelector(state => state.runs.runs);\r\n  const eventRunsHistoryDetails = useSelector(state => state.runs.runs).filter((run) => run.eventId > 0);\r\n\r\n  //State Variables\r\n  const [upcomingEventsSelected, setUpcomingEventsSelected] = useState(false);\r\n  const [registeredEventsSelected, setRegisteredEventsSelected] = useState(false);\r\n  const [completedEventsSelected, setCompletedEventsSelected] = useState(false);\r\n  const [modalVisible, setModalVisible] = useState(false);\r\n  const [modalEventDetails, setModalEventDetails] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n\r\n  //Load Time useEffect hook\r\n  useEffect(() => {\r\n    setUpcomingEventsSelected(true);\r\n  }, []);\r\n\r\n  //Toggle Events Option\r\n  const onToggleSelection = (selectedOption) => {\r\n    if (selectedOption === 'upcomingEvents') {\r\n      setRegisteredEventsSelected(false);\r\n      setCompletedEventsSelected(false);\r\n      setUpcomingEventsSelected(true);\r\n    } else if (selectedOption === 'registeredEvents') {\r\n      setUpcomingEventsSelected(false);\r\n      setCompletedEventsSelected(false);\r\n      setRegisteredEventsSelected(true);\r\n    } else if (selectedOption === 'completedEvents') {\r\n      setUpcomingEventsSelected(false);\r\n      setRegisteredEventsSelected(false);\r\n      setCompletedEventsSelected(true);\r\n    }\r\n  };\r\n\r\n  const onClickEventItem = (eventItem) => {\r\n    setModalEventDetails(eventItem);\r\n    setModalVisible(true);\r\n  };\r\n\r\n  const onCloseEventItem = (eventItem) => {\r\n    setModalVisible(false);\r\n  };\r\n\r\n  const onRegisterEventItem = (eventItem) => {\r\n    dispatch(eventActions.registerUserForEvent(modalEventDetails)).then((response) => {\r\n      if (response.status === StatusCodes.NO_INTERNET) {\r\n        Alert.alert(\"Internet Issue\", \"Active Internet Connection Required!!!\", [{\r\n          text: 'OK',\r\n          onPress: () => {\r\n            setModalVisible(false)\r\n          }\r\n        }], {\r\n          cancelable: false\r\n        });\r\n      } else\r\n      if (response.status != StatusCodes.OK) {\r\n        Alert.alert(\"Registration Failed\", \"Registration for the event failed, please try again later!!!\", [{\r\n          text: 'OK',\r\n          onPress: () => {\r\n            setModalVisible(false)\r\n          }\r\n        }], {\r\n          cancelable: false\r\n        });\r\n      } else {\r\n        Alert.alert(\"Registration Successful\", \"You have been registered successfully, see you on Run Day!!!\", [{\r\n          text: 'OK',\r\n          onPress: () => {\r\n            setModalVisible(false)\r\n          }\r\n        }], {\r\n          cancelable: false\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  const onRefresh = () => {\r\n    setRefreshing(true);\r\n    dispatch(eventActions.loadEventResultDetailsFromServer()).then(() => {\r\n      setRefreshing(false);\r\n    }).catch(err => {\r\n      setRefreshing(false);\r\n    });\r\n  };\r\n\r\n  //Method to lazy load Runs from server \r\n  const loadMoreRunsHistoryFromServer = () => {\r\n    setIsLoading(true);\r\n    let pageNumber = Math.floor(runsHistoryDetails.length / 3);\r\n    dispatch(runActions.loadRunsFromServer(pageNumber)).then(() => {\r\n      setIsLoading(false);\r\n    }).catch(err => {\r\n      setIsLoading(false);\r\n    });\r\n  };\r\n\r\n  //Method to lazy load Upcoming Events from server \r\n  const loadMoreEventsFromServer = () => {\r\n    setIsLoading(true);\r\n    let pageNumber = Math.floor(eventDetails.length / 3);\r\n    dispatch(eventActions.loadEventsFromServer(pageNumber)).then(() => {\r\n      setIsLoading(false);\r\n    }).catch(err => {\r\n      setIsLoading(false);\r\n    });\r\n  };\r\n\r\n  //Event Listener to be called on selecting Run and to navigate to Run History Screen\r\n  const onSelectRunHistoryItem = (itemdata) => {\r\n    props.navigation.navigate('RunDetailsScreen', {\r\n      runId: itemdata.item.runId,\r\n      eventId: itemdata.item.eventId,\r\n      runTrackSnapUrl: itemdata.item.runTrackSnapUrl,\r\n      runDate: itemdata.item.runDate,\r\n      runDay: itemdata.item.runDay,\r\n      runTotalTime: itemdata.item.runTotalTime,\r\n      runDistance: itemdata.item.runDistance,\r\n      runPace: itemdata.item.runPace,\r\n      runCaloriesBurnt: itemdata.item.runCaloriesBurnt,\r\n      runPath: itemdata.item.runPath,\r\n      sourceScreen: 'RunHistoryScreen'\r\n    });\r\n  };\r\n\r\n  // Event Summary Footer for Activity Loader\r\n  const renderEventSummaryFooter = () => {\r\n    return (\r\n      <View>\r\n    {isLoading?\r\n    (\r\n     <ActivityIndicator size=\"large\" color=\"green\"/>\r\n     ):\r\n    (\r\n     <View></View>\r\n     )\r\n   }\r\n   </View>\r\n    );\r\n  };\r\n\r\n//View\r\nreturn (\r\n  <View style={styles.eventsListSummaryScreenContainerStyle}>\r\n   \r\n   <Modal animationType=\"slide\" transparent={true} visible={modalVisible}\r\n   onRequestClose={()=>{}}>\r\n   <EventView\r\n   onRegisterEventItem={onRegisterEventItem} \r\n   onCloseEventItem={onCloseEventItem} \r\n   eventDetails={modalEventDetails}/>\r\n  </Modal>\r\n\r\n   <View style={styles.eventsListSummaryScreenHeaderOptionsStyle}>\r\n    <TouchableOpacity style={styles.touchableOptionStyle} onPress={()=>onToggleSelection('upcomingEvents')}>\r\n     <Text style={{...styles.textHeaderStyle, color:upcomingEventsSelected?'black':'lightgrey'}}>Upcoming</Text>\r\n    </TouchableOpacity>\r\n    <TouchableOpacity style={styles.touchableOptionStyle} onPress={()=>onToggleSelection('registeredEvents')}>\r\n     <Text style={{...styles.textHeaderStyle, color:registeredEventsSelected?'black':'lightgrey'}}>Registered</Text>\r\n    </TouchableOpacity>\r\n    <TouchableOpacity style={styles.touchableOptionStyle} onPress={()=>onToggleSelection('completedEvents')}>\r\n     <Text style={{...styles.textHeaderStyle, color:completedEventsSelected?'black':'lightgrey'}}>Completed</Text>\r\n    </TouchableOpacity>\r\n   </View>\r\n\r\n   {completedEventsSelected&&eventRunsHistoryDetails.length>0?(\r\n   <View style={styles.headerTextViewStyle}>\r\n     <Text style={styles.textHeaderStyle}>Pull to Refresh Rank</Text>\r\n   </View>):\r\n   (<View></View>)}\r\n\r\n   {upcomingEventsSelected===true?\r\n   eventDetails.length===0?\r\n   (<View style={styles.eventItemsListStyle}>\r\n     <Text style={styles.defaultTextStyle}>No Upcoming Events</Text>\r\n    </View>):\r\n   (<View style={styles.eventItemsListStyle}>\r\n    <EventItemsList\r\n    onClickEventItem={onClickEventItem}\r\n    onEndReached={loadMoreEventsFromServer}\r\n    isLoading={isLoading}\r\n    listData={eventDetails}/>\r\n   </View>):\r\n\r\n   registeredEventsSelected===true?\r\n   eventRegistrationDetails.length===0?\r\n   (<View style={styles.eventItemsListStyle}>\r\n     <Text style={styles.defaultTextStyle}>No Registered Events</Text>\r\n    </View>):\r\n   (<View style={styles.eventItemsListStyle}>\r\n    <EventItemsList\r\n    onClickEventItem={onClickEventItem}\r\n    onEndReached={loadMoreEventsFromServer}\r\n    isLoading={isLoading}\r\n    listData={eventRegistrationDetails}/>\r\n   </View>):\r\n   \r\n   eventRunsHistoryDetails.length===0?\r\n   (<View style={styles.eventItemsListStyle}>\r\n     <Text style={styles.defaultTextStyle}>No Completed Events</Text>\r\n    </View>):\r\n   (<View style={styles.eventItemsListStyle}>\r\n    <EventHistoryList\r\n   onSelectRunItem={onSelectRunHistoryItem}\r\n   onEndReached={loadMoreRunsHistoryFromServer}\r\n   isLoading={isLoading}\r\n   onRefresh={onRefresh}\r\n   refreshing={refreshing}\r\n   footer={renderEventSummaryFooter()}\r\n   listData={eventRunsHistoryDetails}/>\r\n   </View>)}\r\n\r\n  </View>\r\n);\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  eventsListSummaryScreenContainerStyle: {\r\n    flex: 1\r\n  },\r\n  eventsListSummaryScreenHeaderOptionsStyle: {\r\n    height: '20%',\r\n    backgroundColor: 'white',\r\n    flexDirection: 'row'\r\n  },\r\n  eventItemsListStyle: {\r\n    height: '80%',\r\n    backgroundColor: 'white'\r\n  },\r\n  touchableOptionStyle: {\r\n    width: '30%',\r\n    height: '20%',\r\n    top: '10%',\r\n    borderRightWidth: 1,\r\n    borderColor: 'lightgrey'\r\n  },\r\n  headerTextViewStyle: {\r\n    alignItems: 'center',\r\n    backgroundColor: 'white'\r\n  },\r\n  textHeaderStyle: {\r\n    fontSize: moderateScale(15, 0.5),\r\n    alignSelf: 'center'\r\n  },\r\n  defaultTextStyle: {\r\n    fontSize: moderateScale(15, 0.5),\r\n    alignSelf: 'center',\r\n    top: '50%',\r\n    color: 'grey'\r\n  }\r\n});\r\n\r\nexport default EventsListSummaryScreen;"]},"metadata":{},"sourceType":"module"}