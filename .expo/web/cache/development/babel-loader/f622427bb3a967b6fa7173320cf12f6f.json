{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport * as Crypto from 'expo-crypto';\nexport var getUserAuthenticationToken = function getUserAuthenticationToken() {\n  return function _callee(dispatch) {\n    var userId, userSecretKey, userIdHex, timeStamp, authenticationTokenDec, authenticationToken, requestHeaderForAuthentication;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('USER_ID'));\n\n          case 2:\n            userId = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('USER_SECRET_KEY'));\n\n          case 5:\n            userSecretKey = _context.sent;\n\n            if (userId) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 8:\n            userIdHex = userId.toString().replace(/-/g, '');\n            timeStamp = new Date().getTime();\n            authenticationTokenDec = userIdHex + timeStamp + userSecretKey;\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, authenticationTokenDec));\n\n          case 13:\n            authenticationToken = _context.sent;\n            requestHeaderForAuthentication = {\n              'X-AUTH': authenticationToken,\n              'USER_ID': userId,\n              'REQUEST_TIMESTAMP': timeStamp,\n              'Content-Type': 'application/json'\n            };\n            return _context.abrupt(\"return\", requestHeaderForAuthentication);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nvar hex_to_ascii = function hex_to_ascii(str1) {\n  var hex = str1.toString();\n  var str = '';\n\n  for (var n = 0; n < hex.length; n += 2) {\n    str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\n  }\n\n  return str;\n};\n\nvar ascii_to_hexa = function ascii_to_hexa(str) {\n  var arr1 = [];\n\n  for (var n = 0, l = str.length; n < l; n++) {\n    var hex = Number(str.charCodeAt(n)).toString(16);\n    arr1.push(hex);\n  }\n\n  return arr1.join('');\n};","map":{"version":3,"sources":["F:/ReactNative/onehealthclient/onehealthclient/utils/AuthenticationUtils.js"],"names":["Crypto","getUserAuthenticationToken","dispatch","AsyncStorage","getItem","userId","userSecretKey","userIdHex","toString","replace","timeStamp","Date","getTime","authenticationTokenDec","digestStringAsync","CryptoDigestAlgorithm","SHA256","authenticationToken","requestHeaderForAuthentication","hex_to_ascii","str1","hex","str","n","length","String","fromCharCode","parseInt","substr","ascii_to_hexa","arr1","l","Number","charCodeAt","push","join"],"mappings":";;AACE,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;AAEA,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,GAAM;AAC9C,SAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEcC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAFd;;AAAA;AAEDC,YAAAA,MAFC;AAAA;AAAA,6CAGqBF,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAHrB;;AAAA;AAGDE,YAAAA,aAHC;;AAAA,gBAIAD,MAJA;AAAA;AAAA;AAAA;;AAAA,6CAKI,IALJ;;AAAA;AAODE,YAAAA,SAPC,GAOWF,MAAM,CAACG,QAAP,GAAkBC,OAAlB,CAA0B,IAA1B,EAAgC,EAAhC,CAPX;AAQDC,YAAAA,SARC,GAQW,IAAIC,IAAJ,GAAWC,OAAX,EARX;AASDC,YAAAA,sBATC,GASwBN,SAAS,GAAGG,SAAZ,GAAwBJ,aAThD;AAAA;AAAA,6CAWLN,MAAM,CAACc,iBAAP,CAAyBd,MAAM,CAACe,qBAAP,CAA6BC,MAAtD,EAA8DH,sBAA9D,CAXK;;AAAA;AAUCI,YAAAA,mBAVD;AAaDC,YAAAA,8BAbC,GAagC;AACnC,wBAAUD,mBADyB;AAEnC,yBAAWZ,MAFwB;AAGnC,mCAAqBK,SAHc;AAInC,8BAAgB;AAJmB,aAbhC;AAAA,6CAoBEQ,8BApBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAsBD,CAvBM;;AAyBP,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AAC7B,MAAIC,GAAG,GAAGD,IAAI,CAACZ,QAAL,EAAV;AACA,MAAIc,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,IAAI,CAArC,EAAwC;AACtCD,IAAAA,GAAG,IAAIG,MAAM,CAACC,YAAP,CAAoBC,QAAQ,CAACN,GAAG,CAACO,MAAJ,CAAWL,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAA5B,CAAP;AACD;;AACD,SAAOD,GAAP;AACD,CAPD;;AASA,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,CAACP,GAAD,EAAS;AAC7B,MAAIQ,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIP,CAAC,GAAG,CAAR,EAAWQ,CAAC,GAAGT,GAAG,CAACE,MAAxB,EAAgCD,CAAC,GAAGQ,CAApC,EAAuCR,CAAC,EAAxC,EAA4C;AAC1C,QAAIF,GAAG,GAAGW,MAAM,CAACV,GAAG,CAACW,UAAJ,CAAeV,CAAf,CAAD,CAAN,CAA0Bf,QAA1B,CAAmC,EAAnC,CAAV;AACAsB,IAAAA,IAAI,CAACI,IAAL,CAAUb,GAAV;AACD;;AACD,SAAOS,IAAI,CAACK,IAAL,CAAU,EAAV,CAAP;AACD,CAPD","sourcesContent":["  import {AsyncStorage} from 'react-native';\r\n  import * as Crypto from 'expo-crypto';\r\n\r\n  export const getUserAuthenticationToken = () => {\r\n    return async dispatch => {\r\n      //await AsyncStorage.removeItem('USER_ID');\r\n      var userId = await AsyncStorage.getItem('USER_ID');\r\n      var userSecretKey = await AsyncStorage.getItem('USER_SECRET_KEY');\r\n      if (!userId) {\r\n        return null;\r\n      }\r\n      var userIdHex = userId.toString().replace(/-/g, '');\r\n      var timeStamp = new Date().getTime();\r\n      var authenticationTokenDec = userIdHex + timeStamp + userSecretKey;\r\n      const authenticationToken = await\r\n      Crypto.digestStringAsync(Crypto.CryptoDigestAlgorithm.SHA256, authenticationTokenDec);\r\n\r\n      var requestHeaderForAuthentication = {\r\n        'X-AUTH': authenticationToken,\r\n        'USER_ID': userId,\r\n        'REQUEST_TIMESTAMP': timeStamp,\r\n        'Content-Type': 'application/json'\r\n      };\r\n\r\n      return requestHeaderForAuthentication;\r\n    };\r\n  };\r\n\r\n  const hex_to_ascii = (str1) => {\r\n    var hex = str1.toString();\r\n    var str = '';\r\n    for (var n = 0; n < hex.length; n += 2) {\r\n      str += String.fromCharCode(parseInt(hex.substr(n, 2), 16));\r\n    }\r\n    return str;\r\n  };\r\n\r\n  const ascii_to_hexa = (str) => {\r\n    var arr1 = [];\r\n    for (var n = 0, l = str.length; n < l; n++) {\r\n      var hex = Number(str.charCodeAt(n)).toString(16);\r\n      arr1.push(hex);\r\n    }\r\n    return arr1.join('');\r\n  };"]},"metadata":{},"sourceType":"module"}