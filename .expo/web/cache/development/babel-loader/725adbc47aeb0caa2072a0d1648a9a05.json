{"ast":null,"code":"import * as SQLite from 'expo-sqlite';\nvar db = SQLite.openDatabase('onehealth.db');\nexport var init = function init() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('CREATE TABLE IF NOT EXISTS RUN_DETAILS (RUN_ID INTEGER PRIMARY KEY NOT NULL, RUN_TOTAL_TIME TEXT NOT NULL, RUN_DISTANCE TEXT NOT NULL,RUN_PACE TEXT NOT NULL,RUN_CALORIES_BURNT TEXT NOT NULL,RUN_CREDITS TEXT NOT NULL,RUN_START_DATE_TIME TEXT NOT NULL ,RUN_DATE TEXT NOT NULL, RUN_DAY TEXT NOT NULL, RUN_PATH TEXT NOT NULL, RUN_TRACK_SNAP_URL TEXT NOT NULL,EVENT_ID INTEGER,IS_SYNC_DONE TEXT NOT NULL);', [], function () {\n        resolve();\n      }, function (_, err) {\n        reject(err);\n      });\n      tx.executeSql('CREATE TABLE IF NOT EXISTS RUN_SUMMARY (id INTEGER PRIMARY KEY NOT NULL, TOTAL_DISTANCE TEXT NOT NULL, TOTAL_RUNS TEXT NOT NULL,TOTAL_CREDITS TEXT NOT NULL, AVERAGE_PACE TEXT NOT NULL,AVERAGE_DISTANCE TEXT NOT NULL, AVERAGE_CALORIES_BURNT TEXT NOT NULL);', [], function () {\n        resolve();\n      }, function (_, err) {\n        reject(err);\n      });\n      tx.executeSql('CREATE TABLE IF NOT EXISTS EVENT_REGISTRATION_DETAILS (EVENT_ID INTEGER PRIMARY KEY NOT NULL, EVENT_NAME TEXT NOT NULL, EVENT_DESCRIPTION TEXT,EVENT_START_DATE TEXT NOT NULL,EVENT_END_DATE TEXT NOT NULL, EVENT_METRIC_TYPE TEXT NOT NULL, EVENT_METRIC_VALUE TEXT NOT NULL, RUN_ID INTEGER);', [], function () {\n        resolve();\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var insertRun = function insertRun(runId, runTotalTime, runDistance, runPace, runCaloriesBurnt, runCredits, runStartDateTime, runDate, runDay, runPath, runTrackSnapUrl, eventId, isSyncDone) {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO RUN_DETAILS (RUN_ID,RUN_TOTAL_TIME,RUN_DISTANCE,RUN_PACE,RUN_CALORIES_BURNT,RUN_CREDITS,RUN_START_DATE_TIME ,RUN_DATE, RUN_DAY, RUN_PATH, RUN_TRACK_SNAP_URL,EVENT_ID,IS_SYNC_DONE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?);', [runId, runTotalTime, runDistance, runPace, runCaloriesBurnt, runCredits, runStartDateTime, runDate, runDay, runPath, runTrackSnapUrl, eventId, isSyncDone], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var deleteRuns = function deleteRuns(runIds) {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('DELETE FROM RUN_DETAILS where RUN_ID in (' + runIds + ');', [], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var fetchRuns = function fetchRuns() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM RUN_DETAILS', [], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var fetchRunsToSync = function fetchRunsToSync() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM RUN_DETAILS where IS_SYNC_DONE=\"0\"', [], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var updateRunsSyncState = function updateRunsSyncState(pendingRunsForSync) {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('UPDATE RUN_DETAILS SET IS_SYNC_DONE=\"1\" where RUN_ID in (' + pendingRunsForSync + ');', [], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var insertRunSummary = function insertRunSummary(totalDistance, totalRuns, totalCredits, averagePace, averageDistance, averageCaloriesBurnt) {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO RUN_SUMMARY (TOTAL_DISTANCE,TOTAL_RUNS,TOTAL_CREDITS,AVERAGE_PACE,AVERAGE_DISTANCE,AVERAGE_CALORIES_BURNT) VALUES (?,?,?,?,?,?);', [totalDistance, totalRuns, totalCredits, averagePace, averageDistance, averageCaloriesBurnt], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var updateEventIdInRunDetails = function updateEventIdInRunDetails(runId, eventId) {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('UPDATE RUN_DETAILS SET EVENT_ID=? where RUN_ID in (' + runId + ');', [eventId], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var updateRunSummary = function updateRunSummary(totalDistance, totalRuns, totalCredits, averagePace, averageDistance, averageCaloriesBurnt) {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('UPDATE RUN_SUMMARY SET TOTAL_DISTANCE=?,TOTAL_RUNS=?,TOTAL_CREDITS=?,AVERAGE_PACE=?,AVERAGE_DISTANCE=?,AVERAGE_CALORIES_BURNT=?', [totalDistance, totalRuns, totalCredits, averagePace, averageDistance, averageCaloriesBurnt], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var fetchRunSummary = function fetchRunSummary() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM RUN_SUMMARY;', [], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var insertEventRegistrationDetails = function insertEventRegistrationDetails(eventId, eventName, eventDescription, eventStartDate, eventEndDate, eventMetricType, eventMetricValue, runId) {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('INSERT INTO EVENT_REGISTRATION_DETAILS (EVENT_ID,EVENT_NAME,EVENT_DESCRIPTION,EVENT_START_DATE,EVENT_END_DATE,EVENT_METRIC_TYPE,EVENT_METRIC_VALUE,RUN_ID) VALUES (?,?,?,?,?,?,?,?);', [eventId, eventName, eventDescription, eventStartDate, eventEndDate, eventMetricType, eventMetricValue, runId], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var updateEventRegistrationDetails = function updateEventRegistrationDetails(eventId, runId) {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('UPDATE EVENT_REGISTRATION_DETAILS SET RUN_ID=? where EVENT_ID in (' + eventId + ');', [runId], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var fetchEventRegistrationDetails = function fetchEventRegistrationDetails() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM EVENT_REGISTRATION_DETAILS', [], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var fetchEventDetailsBasedOnEventId = function fetchEventDetailsBasedOnEventId(eventId) {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM EVENT_REGISTRATION_DETAILS where EVENT_ID in (' + eventId + ');', [], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};\nexport var cleanUpAllData = function cleanUpAllData() {\n  var promise = new Promise(function (resolve, reject) {\n    db.transaction(function (tx) {\n      tx.executeSql('DELETE FROM RUN_DETAILS;', [], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n      tx.executeSql('DELETE FROM RUN_SUMMARY;', [], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n      tx.executeSql('DELETE FROM EVENT_REGISTRATION_DETAILS;', [], function (_, result) {\n        resolve(result);\n      }, function (_, err) {\n        reject(err);\n      });\n    });\n  });\n  return promise;\n};","map":{"version":3,"sources":["F:/ReactNative/onehealthclient/onehealthclient/utils/DBUtils.js"],"names":["SQLite","db","openDatabase","init","promise","Promise","resolve","reject","transaction","tx","executeSql","_","err","insertRun","runId","runTotalTime","runDistance","runPace","runCaloriesBurnt","runCredits","runStartDateTime","runDate","runDay","runPath","runTrackSnapUrl","eventId","isSyncDone","result","deleteRuns","runIds","fetchRuns","fetchRunsToSync","updateRunsSyncState","pendingRunsForSync","insertRunSummary","totalDistance","totalRuns","totalCredits","averagePace","averageDistance","averageCaloriesBurnt","updateEventIdInRunDetails","updateRunSummary","fetchRunSummary","insertEventRegistrationDetails","eventName","eventDescription","eventStartDate","eventEndDate","eventMetricType","eventMetricValue","updateEventRegistrationDetails","fetchEventRegistrationDetails","fetchEventDetailsBasedOnEventId","cleanUpAllData"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,aAAxB;AAEA,IAAMC,EAAE,GAAGD,MAAM,CAACE,YAAP,CAAoB,cAApB,CAAX;AAGA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACxB,MAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,kZAAd,EAEE,EAFF,EAGE,YAAM;AACJJ,QAAAA,OAAO;AACR,OALH,EAME,UAACK,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OARH;AAUAH,MAAAA,EAAE,CAACC,UAAH,CAAc,gQAAd,EAEE,EAFF,EAGE,YAAM;AACJJ,QAAAA,OAAO;AACR,OALH,EAME,UAACK,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OARH;AAUEH,MAAAA,EAAE,CAACC,UAAH,CAAc,iSAAd,EAGA,EAHA,EAIA,YAAM;AACJJ,QAAAA,OAAO;AACR,OAND,EAOA,UAACK,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OATD;AAUH,KA/BD;AAgCD,GAjCe,CAAhB;AAkCA,SAAOR,OAAP;AACD,CApCM;AAuCP,OAAO,IAAMS,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAQC,YAAR,EAAsBC,WAAtB,EAAmCC,OAAnC,EAA4CC,gBAA5C,EAA8DC,UAA9D,EAA0EC,gBAA1E,EAA4FC,OAA5F,EAAqGC,MAArG,EAA6GC,OAA7G,EAAsHC,eAAtH,EAAuIC,OAAvI,EAAgJC,UAAhJ,EAA+J;AACtL,MAAMtB,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,qOAAd,EAAqP,CAACI,KAAD,EAAQC,YAAR,EAAsBC,WAAtB,EAAmCC,OAAnC,EAA4CC,gBAA5C,EAA8DC,UAA9D,EAA0EC,gBAA1E,EAA4FC,OAA5F,EAAqGC,MAArG,EAA6GC,OAA7G,EAAsHC,eAAtH,EAAuIC,OAAvI,EAAgJC,UAAhJ,CAArP,EACE,UAACf,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOD,KARD;AASD,GAVe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM;AAgBP,OAAO,IAAMwB,UAAU,GAAG,SAAbA,UAAa,CAACC,MAAD,EAAY;AACpC,MAAMzB,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,8CAA8CmB,MAA9C,GAAuD,IAArE,EAA2E,EAA3E,EACE,UAAClB,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOD,KARD;AASD,GAVe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM;AAgBP,OAAO,IAAM0B,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC7B,MAAM1B,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,2BAAd,EAA2C,EAA3C,EACE,UAACC,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOD,KARD;AASD,GAVe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM;AAgBP,OAAO,IAAM2B,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,MAAM3B,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,kDAAd,EAAkE,EAAlE,EACE,UAACC,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOD,KARD;AASD,GAVe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM;AAgBP,OAAO,IAAM4B,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,kBAAD,EAAwB;AACzD,MAAM7B,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,8DAA8DuB,kBAA9D,GAAmF,IAAjG,EAAuG,EAAvG,EACE,UAACtB,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOD,KARD;AASD,GAVe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM;AAgBP,OAAO,IAAM8B,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,aAAD,EAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCC,WAAzC,EAAsDC,eAAtD,EAAuEC,oBAAvE,EAAgG;AAC9H,MAAMpC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,8IAAd,EAA8J,CAACyB,aAAD,EAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCC,WAAzC,EAAsDC,eAAtD,EAAuEC,oBAAvE,CAA9J,EACE,UAAC7B,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOD,KARD;AASD,GAVe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM;AAgBP,OAAO,IAAMqC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAC3B,KAAD,EAAQW,OAAR,EAAoB;AAC3D,MAAMrB,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,wDAAwDI,KAAxD,GAAgE,IAA9E,EAAoF,CAACW,OAAD,CAApF,EACE,UAACd,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOD,KARD;AASD,GAVe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM;AAgBP,OAAO,IAAMsC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACP,aAAD,EAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCC,WAAzC,EAAsDC,eAAtD,EAAuEC,oBAAvE,EAAgG;AAC9H,MAAMpC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,iIAAd,EAAiJ,CAACyB,aAAD,EAAgBC,SAAhB,EAA2BC,YAA3B,EAAyCC,WAAzC,EAAsDC,eAAtD,EAAuEC,oBAAvE,CAAjJ,EACE,UAAC7B,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOD,KARD;AASD,GAVe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM;AAgBP,OAAO,IAAMuC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC,MAAMvC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,4BAAd,EAA4C,EAA5C,EACE,UAACC,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOD,KARD;AASD,GAVe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM;AAgBP,OAAO,IAAMwC,8BAA8B,GAAG,SAAjCA,8BAAiC,CAACnB,OAAD,EAAUoB,SAAV,EAAqBC,gBAArB,EAAuCC,cAAvC,EAAuDC,YAAvD,EAAqEC,eAArE,EAAsFC,gBAAtF,EAAwGpC,KAAxG,EAAkH;AAC9J,MAAMV,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,sLAAd,EAAsM,CAACe,OAAD,EAAUoB,SAAV,EAAqBC,gBAArB,EAAuCC,cAAvC,EAAuDC,YAAvD,EAAqEC,eAArE,EAAsFC,gBAAtF,EAAwGpC,KAAxG,CAAtM,EACE,UAACH,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOD,KARD;AASD,GAVe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM;AAgBP,OAAO,IAAM+C,8BAA8B,GAAG,SAAjCA,8BAAiC,CAAC1B,OAAD,EAAUX,KAAV,EAAoB;AAChE,MAAMV,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,uEAAuEe,OAAvE,GAAiF,IAA/F,EAAqG,CAACX,KAAD,CAArG,EACE,UAACH,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOD,KARD;AASD,GAVe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM;AAgBP,OAAO,IAAMgD,6BAA6B,GAAG,SAAhCA,6BAAgC,GAAM;AACjD,MAAMhD,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,0CAAd,EAA0D,EAA1D,EACE,UAACC,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOD,KARD;AASD,GAVe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM;AAgBP,OAAO,IAAMiD,+BAA+B,GAAG,SAAlCA,+BAAkC,CAAC5B,OAAD,EAAa;AAC1D,MAAMrB,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,iEAAiEe,OAAjE,GAA2E,IAAzF,EAA+F,EAA/F,EACE,UAACd,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOD,KARD;AASD,GAVe,CAAhB;AAWA,SAAOR,OAAP;AACD,CAbM;AAgBP,OAAO,IAAMkD,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,MAAMlD,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/CN,IAAAA,EAAE,CAACO,WAAH,CAAe,UAACC,EAAD,EAAQ;AACrBA,MAAAA,EAAE,CAACC,UAAH,CAAc,0BAAd,EAA0C,EAA1C,EACE,UAACC,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOAH,MAAAA,EAAE,CAACC,UAAH,CAAc,0BAAd,EAA0C,EAA1C,EACE,UAACC,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOAH,MAAAA,EAAE,CAACC,UAAH,CAAc,yCAAd,EAAyD,EAAzD,EACE,UAACC,CAAD,EAAIgB,MAAJ,EAAe;AACbrB,QAAAA,OAAO,CAACqB,MAAD,CAAP;AACD,OAHH,EAIE,UAAChB,CAAD,EAAIC,GAAJ,EAAY;AACVL,QAAAA,MAAM,CAACK,GAAD,CAAN;AACD,OANH;AAOD,KAtBD;AAuBD,GAxBe,CAAhB;AAyBA,SAAOR,OAAP;AACD,CA3BM","sourcesContent":["import * as SQLite from 'expo-sqlite';\r\n\r\nconst db = SQLite.openDatabase('onehealth.db');\r\n\r\n//Method to initialize the tables for first time usage\r\nexport const init = () => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('CREATE TABLE IF NOT EXISTS RUN_DETAILS (RUN_ID INTEGER PRIMARY KEY NOT NULL, RUN_TOTAL_TIME TEXT NOT NULL, RUN_DISTANCE TEXT NOT NULL,RUN_PACE TEXT NOT NULL,RUN_CALORIES_BURNT TEXT NOT NULL,RUN_CREDITS TEXT NOT NULL,RUN_START_DATE_TIME TEXT NOT NULL ,RUN_DATE TEXT NOT NULL, RUN_DAY TEXT NOT NULL, RUN_PATH TEXT NOT NULL, RUN_TRACK_SNAP_URL TEXT NOT NULL,EVENT_ID INTEGER,IS_SYNC_DONE TEXT NOT NULL);',\r\n        //tx.executeSql('DROP TABLE RUN_DETAILS;',\r\n        [],\r\n        () => {\r\n          resolve();\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n\r\n      tx.executeSql('CREATE TABLE IF NOT EXISTS RUN_SUMMARY (id INTEGER PRIMARY KEY NOT NULL, TOTAL_DISTANCE TEXT NOT NULL, TOTAL_RUNS TEXT NOT NULL,TOTAL_CREDITS TEXT NOT NULL, AVERAGE_PACE TEXT NOT NULL,AVERAGE_DISTANCE TEXT NOT NULL, AVERAGE_CALORIES_BURNT TEXT NOT NULL);',\r\n        //tx.executeSql('DROP TABLE RUN_SUMMARY;',\r\n        [],\r\n        () => {\r\n          resolve();\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n\r\n        tx.executeSql('CREATE TABLE IF NOT EXISTS EVENT_REGISTRATION_DETAILS (EVENT_ID INTEGER PRIMARY KEY NOT NULL, EVENT_NAME TEXT NOT NULL, EVENT_DESCRIPTION TEXT,EVENT_START_DATE TEXT NOT NULL,EVENT_END_DATE TEXT NOT NULL, EVENT_METRIC_TYPE TEXT NOT NULL, EVENT_METRIC_VALUE TEXT NOT NULL, RUN_ID INTEGER);',\r\n        //tx.executeSql('DROP TABLE EVENT_REGISTRATION_DETAILS;',\r\n        //tx.executeSql('DELETE FROM EVENT_REGISTRATION_DETAILS;',\r\n        [],\r\n        () => {\r\n          resolve();\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};\r\n\r\n//Method to Insert New Run in RUN_DETAILS\r\nexport const insertRun = (runId, runTotalTime, runDistance, runPace, runCaloriesBurnt, runCredits, runStartDateTime, runDate, runDay, runPath, runTrackSnapUrl, eventId, isSyncDone) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('INSERT INTO RUN_DETAILS (RUN_ID,RUN_TOTAL_TIME,RUN_DISTANCE,RUN_PACE,RUN_CALORIES_BURNT,RUN_CREDITS,RUN_START_DATE_TIME ,RUN_DATE, RUN_DAY, RUN_PATH, RUN_TRACK_SNAP_URL,EVENT_ID,IS_SYNC_DONE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?);', [runId, runTotalTime, runDistance, runPace, runCaloriesBurnt, runCredits, runStartDateTime, runDate, runDay, runPath, runTrackSnapUrl, eventId, isSyncDone],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};\r\n\r\n//Method to Delete Runs from RUN_DETAILS based on runIds\r\nexport const deleteRuns = (runIds) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('DELETE FROM RUN_DETAILS where RUN_ID in (' + runIds + ');', [],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};\r\n\r\n//Method to fetch runs from RUN_DETAILS\r\nexport const fetchRuns = () => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('SELECT * FROM RUN_DETAILS', [],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};\r\n\r\n//Method to return Runs from RUN_DETAILS that are not updated to server\r\nexport const fetchRunsToSync = () => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('SELECT * FROM RUN_DETAILS where IS_SYNC_DONE=\"0\"', [],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};\r\n\r\n//Method to Update Runs Sync Flag in RUN_DETAILS\r\nexport const updateRunsSyncState = (pendingRunsForSync) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('UPDATE RUN_DETAILS SET IS_SYNC_DONE=\"1\" where RUN_ID in (' + pendingRunsForSync + ');', [],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};\r\n\r\n//Method to Insert Run Summary In RUN_SUMMARY\r\nexport const insertRunSummary = (totalDistance, totalRuns, totalCredits, averagePace, averageDistance, averageCaloriesBurnt) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('INSERT INTO RUN_SUMMARY (TOTAL_DISTANCE,TOTAL_RUNS,TOTAL_CREDITS,AVERAGE_PACE,AVERAGE_DISTANCE,AVERAGE_CALORIES_BURNT) VALUES (?,?,?,?,?,?);', [totalDistance, totalRuns, totalCredits, averagePace, averageDistance, averageCaloriesBurnt],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};\r\n\r\n//Method to Update Event Id In RUN_DETAILS\r\nexport const updateEventIdInRunDetails = (runId, eventId) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('UPDATE RUN_DETAILS SET EVENT_ID=? where RUN_ID in (' + runId + ');', [eventId],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};\r\n\r\n//Method to Update Run Summary in RUN_SUMMARY\r\nexport const updateRunSummary = (totalDistance, totalRuns, totalCredits, averagePace, averageDistance, averageCaloriesBurnt) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('UPDATE RUN_SUMMARY SET TOTAL_DISTANCE=?,TOTAL_RUNS=?,TOTAL_CREDITS=?,AVERAGE_PACE=?,AVERAGE_DISTANCE=?,AVERAGE_CALORIES_BURNT=?', [totalDistance, totalRuns, totalCredits, averagePace, averageDistance, averageCaloriesBurnt],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};\r\n\r\n//Method to fetch Run Summary from RUN_SUMMARY\r\nexport const fetchRunSummary = () => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('SELECT * FROM RUN_SUMMARY;', [],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};\r\n\r\n//Method to Insert Event Registration Details in EVENT_REGISTRATION_DETAILS\r\nexport const insertEventRegistrationDetails = (eventId, eventName, eventDescription, eventStartDate, eventEndDate, eventMetricType, eventMetricValue, runId) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('INSERT INTO EVENT_REGISTRATION_DETAILS (EVENT_ID,EVENT_NAME,EVENT_DESCRIPTION,EVENT_START_DATE,EVENT_END_DATE,EVENT_METRIC_TYPE,EVENT_METRIC_VALUE,RUN_ID) VALUES (?,?,?,?,?,?,?,?);', [eventId, eventName, eventDescription, eventStartDate, eventEndDate, eventMetricType, eventMetricValue, runId],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};\r\n\r\n//Method to Update Event Registration Details in EVENT_REGISTRATION_DETAILS\r\nexport const updateEventRegistrationDetails = (eventId, runId) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('UPDATE EVENT_REGISTRATION_DETAILS SET RUN_ID=? where EVENT_ID in (' + eventId + ');', [runId],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};\r\n\r\n//Method to Get Event Registration Details from EVENT_REGISTRATION_DETAILS\r\nexport const fetchEventRegistrationDetails = () => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('SELECT * FROM EVENT_REGISTRATION_DETAILS', [],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};\r\n\r\n//Method to Get Event Registration Details from EVENT_REGISTRATION_DETAILS based on eventId\r\nexport const fetchEventDetailsBasedOnEventId = (eventId) => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('SELECT * FROM EVENT_REGISTRATION_DETAILS where EVENT_ID in (' + eventId + ');', [],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};\r\n\r\n//Method to Clean Up All Local Data\r\nexport const cleanUpAllData = () => {\r\n  const promise = new Promise((resolve, reject) => {\r\n    db.transaction((tx) => {\r\n      tx.executeSql('DELETE FROM RUN_DETAILS;', [],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n      tx.executeSql('DELETE FROM RUN_SUMMARY;', [],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n      tx.executeSql('DELETE FROM EVENT_REGISTRATION_DETAILS;', [],\r\n        (_, result) => {\r\n          resolve(result);\r\n        },\r\n        (_, err) => {\r\n          reject(err);\r\n        });\r\n    });\r\n  });\r\n  return promise;\r\n};"]},"metadata":{},"sourceType":"module"}